#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef RFIDBLESDK_SWIFT_H
#define RFIDBLESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RFIDBleSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSURL;
@class NSString;
/// Logging tool.<br/>
/// 日志工具.
/// Logging tool, you can control whether to display the SDK running log to the console and save it to a file.
/// SDK logging is turned off by default, enable saveLog will only be saved to the user’s cell phone APP black box, which is convenient to use for troubleshooting, and will not leak any data.
/// 日志工具，可控制是否将SDK运行日志显示到控制台和保存到文件中。SDK日志默认关闭的，启用saveLog也只会保存到用户手机APP黑盒之中，方便用于排查问题，不会泄露任何数据。
/// remark:
/// Currently, the LogUtil has very few features, which will be added gradually if necessary.<br/>
/// 目前日志工具的功能很少，后续需要再逐步添加
SWIFT_CLASS("_TtC10RFIDBleSDK7LogUtil")
@interface LogUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LogUtil * _Nonnull shared;)
+ (LogUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Whether to print logs to console. Default false.<br/>
/// 是否打印日志到控制台，默认关闭
@property (nonatomic) BOOL showLog;
/// Whether to save logs to file. Default false.<br/>
/// 是否保存日志到文件中，默认关闭
@property (nonatomic) BOOL saveLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Clear all log files.<br/>
/// 清除所有日志文件
- (void)clearAllLogs;
/// Get a list of all log files.<br/>
/// 获取所有日志文件的列表
- (NSArray<NSURL *> * _Nonnull)getLogFiles SWIFT_WARN_UNUSED_RESULT;
/// Returns the contents of the specified log file.<br/>
/// 返回指定日志文件的内容
- (NSString * _Nullable)readLogFileContent:(NSURL * _Nonnull)logFilePath SWIFT_WARN_UNUSED_RESULT;
@end

/// Tag storage area<br/>
/// 标签存储区
typedef SWIFT_ENUM(NSInteger, RFIDBank, open) {
/// 0: RESERVED
/// note:
/// Typically, there are 2 words (8 characters), with the first 8 characters being the kill password and the last 8 characters being the access password.<br/>
/// 一般有4个字(16个字符)，前8位为销毁密码，后8位为访问密码
  RFIDBankRESERVED = 0,
/// 1: EPC
  RFIDBankEPC = 1,
/// 2: TID
/// note:
/// Normally, it is of a fixed length of 6 words.<br/>
/// 一般固定长度6个字
  RFIDBankTID = 2,
/// 3: USER
  RFIDBankUSER = 3,
};

@class NSData;
/// Barcode data object.<br/>
/// 扫码数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK15RFIDBarcodeInfo")
@interface RFIDBarcodeInfo : NSObject
/// Whether the data of this barcode is valid.<br/>
/// 本标签数据是否有效
@property (nonatomic, readonly) BOOL result;
/// Barcode string, default parsing with UHF-8.<br/>
/// barcode字符串，默认以UHF-8解析
@property (nonatomic, readonly, copy) NSString * _Nonnull barcode;
/// Barcode Data object, which can be parsed according to other formats as needed.<br/>
/// Barcode Data对象，可根据需要按照其他格式来解析
@property (nonatomic, readonly, copy) NSData * _Nonnull barcodeData;
/// Barcode Type, see <code>RFIDBarcodeTypeInSSIID</code><br/>
/// Barcode标签类型，见<code>RFIDBarcodeTypeInSSIID</code>
@property (nonatomic, readonly) NSInteger ssiId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class NSNumber;
@class RFIDTagInfo;
enum RFIDState : NSInteger;
/// SDK manager, all RFID related interfaces are open here, use <code>RFIDBleManager.shared.xxx</code> to call it.<br/>
/// SDK管理器，所有RFID相关接口均在此开放，使用 <code>RFIDBleManager.shared.xxx</code> 调用即可.
/// <ol>
///   <li>
///     SDK needs to use Bluetooth related functions, please ensure that the project running has requested Bluetooth permissions.
///     If you need to use radar positioning-related features, you will also need to request location permissions to obtain the phone’s azimuth.
///   </li>
///   <li>
///     Most SDK methods block the thread. It’s recommended to call them in background threads.
///     However, it’s important to note that the module’s ability to process commands is limited.
///     For commands in the <code>UHFProtocol</code> protocol, the module can only process one at a time. Therefore, avoid sending multiple commands simultaneously.
///   </li>
/// </ol>
/// <hr/>
/// <ol>
///   <li>
///     SDK需要使用蓝牙相关功能，请确保运行项目申请了蓝牙权限。若需要使用雷达定位相关功能，还需要申请定位权限以获取手机的方位角。
///   </li>
///   <li>
///     SDK的相关方法一般都会阻塞线程，建议在后台线程中调用。不过需要注意，设备的模块处理命令的能力是有限的，对于<code>UHFProtocol</code>协议中的命令，模块一次只能处理一个，因此不要同时发送多个命令。
///   </li>
/// </ol>
/// \code
/// // It's okay to send multiple commands consecutively in the same thread,
/// // as commands will block and wait.
/// // 同一线程中可以连续发送多个命令，因为命令会阻塞等待
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getFrequency()
///     RFIDBleManager.shared.getPower()
///     RFIDBleManager.shared.getRFLink()
///     // ....
/// }
///
/// // Avoid sending multiple commands simultaneously, 
/// // because the module cannot process multiple commands at the same time.
/// // 不可以同时发送多个命令，因为模块不能同时处理多条命令
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getFrequency()
/// }
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getPower()
/// }
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getRFLink()
/// }
///
/// \endcode
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDBleManager")
@interface RFIDBleManager : NSObject
/// SDK singleton object.<br/>
/// SDK单例对象
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RFIDBleManager * _Nonnull shared;)
+ (RFIDBleManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Scan search Bluetooth peripheral callback.<br/>
/// 扫描搜索蓝牙外设回调
/// see <a href="https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/centralmanager(_:diddiscover:advertisementdata:rssi:)">https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/centralmanager(_:diddiscover:advertisementdata:rssi:)</a>
/// This block has the following parameters:
/// <ul>
///   <li>
///     <code>peripheral</code>: peripheral object.<br/>
///     外设对象.
///   </li>
///   <li>
///     <code>advertisementData</code>: advertisementData of peripheral.<br/>
///     外设的广播数据.
///   </li>
///   <li>
///     <code>RSSI</code>: rssi of  peripheral.<br/>
///     外设广播信号.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable blePeripheralsBlock)(CBPeripheral * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSNumber * _Nonnull);
/// Bluetooth peripheral state update callback.<br/>
/// 蓝牙状态更新回调
/// This block has the following parameters:
/// <ul>
///   <li>
///     <code>peripheral</code>: Peripheral object.<br/>
///     外设对象.
///   </li>
///   <li>
///     <code>state</code>: Peripheral state.<br/>
///     外设状态.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable bleStateUpdateBlock)(CBPeripheral * _Nonnull, CBPeripheralState);
/// RFID scan tag callback.<br/>
/// RFID扫描标签回调
@property (nonatomic, copy) void (^ _Nullable bleRFIDTagInfoBlock)(RFIDTagInfo * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Bluetooth peripheral currently being connected.<br/>
/// 正在连接的蓝牙设备
@property (nonatomic, readonly, strong) CBPeripheral * _Nullable peripheral;
/// Set Bluetooth peripheral button event callback.<br/>
/// 设置蓝牙外设按键事件回调
/// \param keyDownBlock Key Down event callback block.<br/>
/// 按下事件回调block
///
/// \param keyUpBlock Key Up event callback block.<br/>
/// 抬起事件回调block
///
- (void)setKeyEventWithKeyDownBlock:(void (^ _Nullable)(NSInteger))keyDownBlock keyUpBlock:(void (^ _Nullable)(NSInteger))keyUpBlock;
- (enum RFIDState)getInventoryFlag SWIFT_WARN_UNUSED_RESULT;
@end

@class CBUUID;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// Search for Peripherals.<br/>
/// 搜索蓝牙外设
/// Please refer to serviceUUIDS and options parameters:<br/>
/// <a href="https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/scanforperipherals(withservices:options:)">https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/scanforperipherals(withservices:options:)</a><br/>
/// serviceUUIDS和options参数参考上方链接
/// note:
/// The blePeripheralsBlock parameter can be set separately or passed directly into this method, with the same effect.<br/>
/// blePeripheralsBlock参数可以单独设置，也可以直接在本方法中传入，效果相同
/// \param blePeripheralsBlock Scan search Bluetooth peripheral callback Block.<br/>
/// 扫描搜索蓝牙外设回调Block
///
- (void)scanForPeripheralsWithServiceUUIDS:(NSArray<CBUUID *> * _Nullable)serviceUUIDS options:(NSDictionary<NSString *, id> * _Nullable)options :(void (^ _Nullable)(CBPeripheral * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSNumber * _Nonnull))blePeripheralsBlock;
/// Stop searching for Peripherals.<br/>
/// 停止搜索蓝牙外设
- (void)stopForPeripherals;
/// Connect to a Peripheral.<br/>
/// 连接蓝牙外设
- (void)connectPeripheral:(CBPeripheral * _Nonnull)peripheral bleDidFailToConnectBlock:(void (^ _Nullable)(CBPeripheral * _Nonnull, NSError * _Nullable))bleDidFailToConnectBlock;
/// DisConnect to a Peripheral.<br/>
/// 断开蓝牙外设
- (void)disconnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// Retrieve Connected Peripherals.<br/>
/// 检索已连接的外设
- (NSArray<CBPeripheral *> * _Nonnull)retrieveConnectedPeripherals SWIFT_WARN_UNUSED_RESULT;
@end

@class RFIDResult;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// start scanning barcodes.<br/>
/// 开始扫描条码。
/// <ul>
///   <li>
///     When scanning QR code or barcode, scanner param can’t be set or get.
///   </li>
///   <li>
///     The SDK cannot guarantee the correctness of the continuous and unique parameters of the scanner,
///     so it is not recommended to use this interface.<br/>
///     If continuous scanning without repetition is required, before calling this interface,
///     please ensure that the “continue” and “unique” parameters are set to 01 using the  <code>setBarcodeParameter(key:value:)</code> interface.
///   </li>
///   <li>
///     在扫描二维码或条码时，无法设置和获取扫描头相关参数，如BarcodeType.
///   </li>
///   <li>
///     SDK 无法保证扫描头continue和unique参数的正确，不建议使用。<br/>
///     若确实需要连续扫描不重复的功能，调用本接口前，请确保使用<code>setBarcodeParameter(key:value:)</code>接口将
///     “continue” 和 “unique” 参数设置为 01。
///   </li>
/// </ul>
/// \code
/// RFIDBleManager.shared.setBarcodeParameter("F189", "01") // continue
/// RFIDBleManager.shared.setBarcodeParameter("F1D3", "01") // unique
/// // RFIDBleManager.shared.startBarcode(continuous: continue, unique: unique, barcodeBlock:...)
///
/// \endcode\param continuous Continuous scanning or not.<br/>
/// 是否连续扫描.
///
/// \param unique Whether the scanned label is unique or not, this parameter is only valid for continuous scanning.<br/>
/// 扫描标签是否可重复，该参数只有连续扫描时生效.
///
/// \param barcodeBlock Scan Data Callbacks.<br/>
/// 扫描数据回调
///
///
/// returns:
/// Open Scan Results. Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 开启扫描结果，成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)startBarcodeWithContinuous:(BOOL)continuous unique:(BOOL)unique barcodeBlock:(void (^ _Nonnull)(RFIDBarcodeInfo * _Nonnull))barcodeBlock SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use startBarcode(barcodeBlock:(_ barcode: RFIDBarcodeInfo) -> Void) instead");
/// start scanning barcodes.<br/>
/// 开始扫描条码。
/// When scanning QR codes or barcodes, it’s not possible to set or retrieve parameters related to the scanner head, such as BarcodeType.<br/>
/// 在扫描二维码或条码时，无法设置和获取扫描头相关参数，如BarcodeType.
/// \param barcodeBlock Scan Data Callbacks.<br/>
/// 扫描数据回调
///
///
/// returns:
/// Open Scan Results. Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 开启扫描结果，成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)startBarcodeWithBarcodeBlock:(void (^ _Nonnull)(RFIDBarcodeInfo * _Nonnull))barcodeBlock SWIFT_WARN_UNUSED_RESULT;
/// stop scanning barcodes.<br/>
/// 停止扫描条码
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopBarcode SWIFT_WARN_UNUSED_RESULT;
/// settings Recognize barcode type when scanning.<br/>
/// 设置 扫码时识别条码类型
/// \param barcodeType true: open, false: close
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBarcodeType:(BOOL)barcodeType SWIFT_WARN_UNUSED_RESULT;
/// Get BarcodeType parameter.<br/>
/// 获取BarcodeType参数
///
/// returns:
/// If the acquisition is successful, the data field of <code>RFIDResult</code> is Bool.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Bool.
- (RFIDResult * _Nonnull)getBarcodeType SWIFT_WARN_UNUSED_RESULT;
/// set Barcode Parameter.
/// \param key key, Requires hexadecimal digits.
///
/// \param value value, Requires hexadecimal digits.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure) or other result code<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBarcodeParameterWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// get Barcode Parameter
/// \param key key, Requires hexadecimal digits.
///
///
/// returns:
/// If the acquisition is successful, the data field of <code>RFIDResult</code> is the value of Data type.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Data类型的value值.
- (RFIDResult * _Nonnull)getBarcodeParameter:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// Set Rssi.<br/>
/// 设置Rssi
/// \param rssi true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setRssi:(BOOL)rssi SWIFT_WARN_UNUSED_RESULT;
/// Get Rssi.<br/>
/// 获取Rssi
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Bool.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Bool
- (RFIDResult * _Nonnull)getRssi SWIFT_WARN_UNUSED_RESULT;
/// Set peripheral buzzer.<br/>
/// 设置外设蜂鸣器.
/// \param buzzer true: Open buzzer;  false: Close buzzer.<br/>
/// true: 打开蜂鸣器;  false: 关闭蜂鸣器.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBuzzer:(BOOL)buzzer SWIFT_WARN_UNUSED_RESULT;
/// Get peripheral buzzer.<br/>
/// 获取外设蜂鸣器.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: buzzer is Open;  false: buzzer is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: 蜂鸣器打开;  false: 蜂鸣器关闭.
- (RFIDResult * _Nonnull)getBuzzer SWIFT_WARN_UNUSED_RESULT;
/// Set the buzzer volume.
/// note:
/// This interface requires custom mainboard firmware support.<br/>
/// 该接口需要定制主板固件的支持.
/// \param volume 0~100
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBuzzerVolume:(NSInteger)volume SWIFT_WARN_UNUSED_RESULT;
/// Get the buzzer volume (0-100).
/// note:
/// This interface requires custom mainboard firmware support.<br/>
/// 该接口需要定制主板固件的支持.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getBuzzerVolume SWIFT_WARN_UNUSED_RESULT;
/// Get Bluetooth version.<br/>
/// 获取蓝牙版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is <code>RFIDBleVersion</code>.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>RFIDBleVersion</code>对象.
- (RFIDResult * _Nonnull)getBluetoothVersion SWIFT_WARN_UNUSED_RESULT;
/// Get motherboard version.<br/>
/// 获取主板版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String.
- (RFIDResult * _Nonnull)getMainboardVersion SWIFT_WARN_UNUSED_RESULT;
/// Get Battery, return the percentage integer<br/>
/// 获取电量，返回百分比整数
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getBattery SWIFT_WARN_UNUSED_RESULT;
/// Set key_mode param.<br/>
/// 设置key_mode 参数.
/// KeyMode参数作用是控制蓝牙设备扫描按键的触发模式。<br/>
/// 当 KeyMode = 0 时，蓝牙扫描按键抬起时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyUpBlock</code> 回调中返回键值 1，按下事件不触发；<br/>
/// 当 KeyMode = 1 时，蓝牙扫描按键按下时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyDownBlock</code> 回调中返回键值 3，抬起时会在 <code>keyUpBlock</code> 回调中返回键值 4 ；
/// \param keyMode 0 or 1.<br/>
/// 0: Only lift keycode 1
///
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)setKeyMode:(NSInteger)keyMode SWIFT_WARN_UNUSED_RESULT;
/// Get key_mode param.<br/>
/// 获取 key_mode 参数.
/// KeyMode参数作用是控制蓝牙设备扫描按键的触发模式。<br/>
/// 当 KeyMode = 0 时，蓝牙扫描按键抬起时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyUpBlock</code> 回调中返回键值 0，按下事件无返回；<br/>
/// 当 KeyMode = 1 时，蓝牙扫描按键按下时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyDownBlock</code> 回调中返回键值 3，抬起时会在 <code>keyUpBlock</code> 回调中返回键值 4 ；
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>Int</code>.
- (RFIDResult * _Nonnull)getKeyMode SWIFT_WARN_UNUSED_RESULT;
/// Set turn_key param.<br/>
/// 设置turn_key 参数.
/// \param turnKey 0 or 1.<br/>
/// 0: Disable powerkey switch between UHF and barcode in HID mode.<br/>
/// 1: Enable powerkey switch between UHF and barcode in HID mode.
///
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)setTurnKey:(NSInteger)turnKey SWIFT_WARN_UNUSED_RESULT;
/// Get turn_key param.<br/>
/// 获取turn_key 参数.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getTurnKey SWIFT_WARN_UNUSED_RESULT;
/// Get the serial number.<br/>
/// 获取设备序列号.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is <code>String</code>.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>String</code>.
- (RFIDResult * _Nonnull)getSN SWIFT_WARN_UNUSED_RESULT;
/// Upgrade mainboard, UHF or bluetooth. The upgrade process and results are returned in the callback.<br/>
/// 升级主板、UHF，升级过程和结果在回调中返回.
/// note:
/// Bluetooth firmware upgrade is not supported in the current version. Custom implementation can be achieved through the <a href="https://github.com/NordicSemiconductor/IOS-DFU-Library">IOS DFU Library</a>.<br/>
/// 当前版本SDK不支持蓝牙升级，可以使用 <a href="https://github.com/NordicSemiconductor/IOS-DFU-Library">IOS DFU Library</a> 自行实现
/// \param type see <code>RFIDUpgradeType</code>.<br/>
/// 0: Mainboard;<br/>
/// 1: UHF;<br/>
/// 2: Bluetooth. Not Support now !
///
/// \param fileURL Upgrade file data.<br/>
/// 升级文件数据.
///
/// \param callback Upgrade result callback:<br/>
/// Upgrade success - RFIDResult(.success)<br/>
/// Upgrade failure - RFIDResult(.failure) …<br/>
/// Upgrading - RFIDResult(.pending, data:”(progress)”) ,  progress: 0-100<br/>
/// 升级结果回调:<br/>
/// 升级成功 - RFIDResult(.success)<br/>
/// 升级失败 - RFIDResult(.failure) …<br/>
/// 升级中 - RFIDResult(.pending,  data:”(progress)”) ,  progress: 0-100
///
- (void)upgradeWithType:(NSInteger)type fileData:(NSData * _Nonnull)fileData callback:(void (^ _Nonnull)(RFIDResult * _Nonnull))callback;
@end

@class RFIDFilter;
@class RFIDGen2;
@class RFIDMemoryBank;
@class RFIDLocateInfo;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// singleInventory<br/>
/// 单步盘点
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
///
/// returns:
/// If the tag is successfully found, the data field in the <code>RFIDResult</code> parameter is returned as the <code>RFIDTagInfo</code> tag object.<br/>
/// 若成功找到标签，则返回<code>RFIDResult</code>参数中data字段为<code>RFIDTagInfo</code>标签对象。
- (RFIDResult * _Nonnull)singleInventoryWithFilter:(RFIDFilter * _Nullable)filter SWIFT_WARN_UNUSED_RESULT;
/// startInventory<br/>
/// 开启盘点
/// <ul>
///   <li>
///     This function only returns the result of turning on the inventory, and the tag data inventoried is returned in <code>BleRFIDTagInfoBlock</code>;
///   </li>
///   <li>
///     The BleRFIDTagInfoBlock parameter can be passed directly in this method, or can be set separately, with the same effect.
///   </li>
///   <li>
///     Once inventorying is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     该函数只返回开启盘点的结果，盘点到的标签数据在 <code>BleRFIDTagInfoBlock</code> 回调中返回；
///   </li>
///   <li>
///     BleRFIDTagInfoBlock参数可以直接在本方法中传入，也可以可以单独设置，效果相同；
///   </li>
///   <li>
///     开启盘点后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param bleRFIDTagInfoBlock Inventory label data callback.<br/>
/// 盘点标签数据回调.
///
///
/// returns:
/// Returns the results of opening the inventory.<br/>
/// 返回开启盘点的结果
- (RFIDResult * _Nonnull)startInventoryWithFilter:(RFIDFilter * _Nullable)filter bleRFIDTagInfoBlock:(void (^ _Nullable)(RFIDTagInfo * _Nonnull))bleRFIDTagInfoBlock SWIFT_WARN_UNUSED_RESULT;
/// stopInventory.<br/>
/// 停止盘点
///
/// returns:
/// Return to Stop Inventory Result.<br/>
/// 返回停止盘点结果.
- (RFIDResult * _Nonnull)stopInventory SWIFT_WARN_UNUSED_RESULT;
/// Read Tag.<br/>
/// 读标签.
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param bank Read bank of Tag. see <code>RFIDBank</code><br/>
/// 读取标签的存储区. 具体见<code>RFIDBank</code>
///
/// \param offset The offset address to be read, in unit of word.<br/>
/// 读取的偏移地址，单位为字.
///
/// \param length The length address to be read, in unit of bit.<br/>
/// 读取的长度，单位为字.
///
/// \param password Access password.<br/>
/// 访问密码
///
///
/// returns:
/// If the read is successful, the data field of the returned <code>RFIDResult</code> will be a String type containing the tag data.<br/>
/// 如果读取成功，返回的<code>RFIDResult</code>的data字段为String类型标签数据
- (RFIDResult * _Nonnull)readDataWithFilter:(RFIDFilter * _Nonnull)filter bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Write data to Tag.<br/>
/// 写标签.
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param bank The tag bank to be written. see <code>RFIDBank</code><br/>
/// 写入的标签存储区. 具体见<code>RFIDBank</code>
///
/// \param offset The offset address to be written, in unit of word.<br/>
/// 写入的偏移地址，单位为字.
///
/// \param length The length address to be written, in unit of bit.<br/>
/// 写入的长度，单位为字.
///
/// \param password Access password.<br/>
/// 访问密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)writeDataWithFilter:(RFIDFilter * _Nonnull)filter bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length password:(NSString * _Nonnull)password data:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Lock the tag.<br/>
/// 锁定标签
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param lockMode Locking Operation Type . see <code>RFIDLockMode</code><br/>
/// 锁定操作类型. 具体见<code>RFIDLockMode</code>
///
/// \param lockBank Lock bank areas,  see <code>RFIDLockBank</code>.<br/>
/// 可锁定区域， 具体见<code>RFIDLockBank</code>
///
/// \param password lock password. Can’t use default password.<br/>
/// 锁定密码，不可使用默认密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)lockMemWithFilter:(RFIDFilter * _Nonnull)filter lockMode:(NSInteger)lockMode lockBank:(NSArray<NSNumber *> * _Nonnull)lockBank password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Kill the tag.<br/>
/// 销毁标签
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param password lock password. Can’t use default password.<br/>
/// 锁定密码，不可使用默认密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)killTagWithFilter:(RFIDFilter * _Nonnull)filter password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Set module frequency.<br/>
/// 设置模块频段
/// \param frequency see <code>RFIDFrequency</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setFrequency:(NSInteger)frequency SWIFT_WARN_UNUSED_RESULT;
/// Get module frequency.<br/>
/// 获取模块频段
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be a Int type containing the frequency. see <code>RFIDFrequency</code><br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型频段值，具体见<code>RFIDFrequency</code>
- (RFIDResult * _Nonnull)getFrequency SWIFT_WARN_UNUSED_RESULT;
/// Set module power.<br/>
/// 设置模块功率
/// \param power 1~30
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setPower:(NSInteger)power SWIFT_WARN_UNUSED_RESULT;
/// Get module power.<br/>
/// 获取模块功率
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be a Int type containing the power value.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型功率值
- (RFIDResult * _Nonnull)getPower SWIFT_WARN_UNUSED_RESULT;
/// Set RF link combination.<br/>
/// 设置模块RF链路组合
/// \param rfLink see <code>RFIDRFLink</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setRFLink:(NSInteger)rfLink SWIFT_WARN_UNUSED_RESULT;
/// Get RF link combination.<br/>
/// 获取模块RF链路组合
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Int type containing the RF link, see <code>RFIDRFLink</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型链路值，具体见<code>RFIDRFLink</code>
- (RFIDResult * _Nonnull)getRFLink SWIFT_WARN_UNUSED_RESULT;
/// Set Gen2.<br/>
/// 设置Gen2.
/// When setting a parameter of Gen2, it is recommended to get the gen2 parameter first, and then set the corresponding parameter according to the need, try not to affect other parameters. For example, set querySession and queryTarget:<br/>
/// 设置Gen2某个参数时，建议先获取gen2参数，然后再根据需要设置相应参数，尽量不要影响其他参数。例如设置querySession和queryTarget：
/// \code
/// let res = RFIDBleManager.shared.getGen2()
/// if res.code == .success, let gen2: RFIDGen2 = res.data as? RFIDGen2 {
///     gen2.querySession = session
///     gen2.queryTarget = target
///     _ = RFIDBleManager.shared.setGen2(gen2)
/// }
///
/// \endcode\param gen2 see <code>RFIDGen2</code>
///
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDGen2</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDGen2</code>类型对象
- (RFIDResult * _Nonnull)setGen2:(RFIDGen2 * _Nonnull)gen2 SWIFT_WARN_UNUSED_RESULT;
/// Get Gen2.<br/>
/// 获取Gen2
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDGen2</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDGen2</code>
- (RFIDResult * _Nonnull)getGen2 SWIFT_WARN_UNUSED_RESULT;
/// Set memoryBank.<br/>
/// 设置盘点模式
/// \param memoryBank see <code>RFIDMemoryBank</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setMemoryBank:(RFIDMemoryBank * _Nonnull)memoryBank SWIFT_WARN_UNUSED_RESULT;
/// Get memoryBank.<br/>
/// 获取盘点模式
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDMemoryBank</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDMemoryBank</code>
- (RFIDResult * _Nonnull)getMemoryBank SWIFT_WARN_UNUSED_RESULT;
/// Set FastID.<br/>
/// 设置FastID.
/// \param fastID true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setFastID:(BOOL)fastID SWIFT_WARN_UNUSED_RESULT;
/// Get FastID.<br/>
/// 获取FastID.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: FastID is Open;  false: FastID is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: FastID打开;  false: FastID关闭.
- (RFIDResult * _Nonnull)getFastID SWIFT_WARN_UNUSED_RESULT;
/// Set TagFocus.<br/>
/// 设置TagFocus.
/// \param tagFocus true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setTagFocus:(BOOL)tagFocus SWIFT_WARN_UNUSED_RESULT;
/// Get TagFocus.<br/>
/// 获取TagFocus.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: TagFocus is Open;  false: TagFocus is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: TagFocus打开;  false: TagFocus关闭.
- (RFIDResult * _Nonnull)getTagFocus SWIFT_WARN_UNUSED_RESULT;
/// Start Radar Location.<br/>
/// 开启雷达扫描.
/// <ul>
///   <li>
///     Once radar localization is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     开启雷达定位后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param radarInfoBlock Radar tag information callback.<br/>
/// 雷达标签信息回调
///
/// \param radarAngleBlock Radar orientation information callback.<br/>
/// 雷达方位信息回调
///
- (RFIDResult * _Nonnull)startRadarLocationWithFilter:(RFIDFilter * _Nonnull)filter radarInfoBlock:(void (^ _Nonnull)(NSArray<RFIDLocateInfo *> * _Nonnull))radarInfoBlock radarAngleBlock:(void (^ _Nonnull)(double))radarAngleBlock SWIFT_WARN_UNUSED_RESULT;
/// Stop Radar Location.<br/>
/// 停止雷达扫描.
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopRadarLocation SWIFT_WARN_UNUSED_RESULT;
/// Set Dynamic Distance. The larger the parameter, the farther the device scans.<br/>
/// 设置动态距离。该参数越大，设备扫描距离越远。只有在盘点、雷达定位、定位过程中调用生效
/// \param distance Options: 5~30
///
- (void)setDynamicDistance:(NSInteger)distance;
/// startLocation.<br/>
/// 开启定位
/// <ul>
///   <li>
///     Once location is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     开启定位后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param locateInfoBlock Radar tag information callback.<br/>
/// 定位标签信息回调
///
- (RFIDResult * _Nonnull)startLocationWithFilter:(RFIDFilter * _Nonnull)filter locateInfoBlock:(void (^ _Nonnull)(RFIDLocateInfo * _Nonnull))locateInfoBlock SWIFT_WARN_UNUSED_RESULT;
/// Stop Location.<br/>
/// 停止定位扫描.
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopLocation SWIFT_WARN_UNUSED_RESULT;
/// Get UHF hardware version.<br/>
/// 获取UHF硬件版本.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String
- (RFIDResult * _Nonnull)getUHFHardwareVersion SWIFT_WARN_UNUSED_RESULT;
/// Get UHF firmware version.<br/>
/// 获取UHF固件版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String
- (RFIDResult * _Nonnull)getUHFFirmwareVersion SWIFT_WARN_UNUSED_RESULT;
/// Get module temperature.<br/>
/// 获取模块温度.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int
- (RFIDResult * _Nonnull)getUHFTemperature SWIFT_WARN_UNUSED_RESULT;
@end

/// Bluetooth version data object.<br/>
/// 蓝牙版本数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDBleVersion")
@interface RFIDBleVersion : NSObject
/// Hardware version information.
/// 硬件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
/// Firmware version information.
/// 固件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// Software version information.
/// 软件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull software;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter parameters.<br/>
/// 过滤参数
/// note:
/// Filter bank parameter cannot use RESERVED.<br/>
/// 过滤bank参数不能使用RESERVED
SWIFT_CLASS("_TtC10RFIDBleSDK10RFIDFilter")
@interface RFIDFilter : NSObject
/// Whether to enable filtering.<br/>
/// 是否开启过滤
@property (nonatomic) BOOL enable;
/// Tag type, see <code>RFIDBank</code><br/>
/// 标签类型，见<code>RFIDBank</code>
@property (nonatomic) NSInteger bank;
/// Filter offset address.<br/>
/// 过滤起始地址
@property (nonatomic) NSInteger offset;
/// Filter length.<br/>
/// 过滤长度
@property (nonatomic) NSInteger length;
/// Filter data.<br/>
/// 过滤数据
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
/// init Object.
/// \param enable 开启过滤标志.
///
/// \param bank The filtering area can take values from <code>RFIDBank</code> , which are EPC (1), TID (2), and USER (3).<br/>
/// 过滤区域，可取值为 <code>RFIDBank</code> 的 EPC (1)、TID (2)、USER (3)
///
/// \param offset Filter offset address.<br/>
/// 过滤偏移地址.
///
/// \param length Filter data length.<br/>
/// 过滤数据长度.
///
/// \param data FIlter data.<br/>
/// 过滤数据.
///
- (nonnull instancetype)initWithEnable:(BOOL)enable bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length data:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Module Frequency
/// 模块频段
typedef SWIFT_ENUM(NSInteger, RFIDFrequency, open) {
/// 0x01: China frequency range (840~845MHz)
  RFIDFrequencyChina1 = 0x01,
/// 0x02: China Plus frequency range (920~925MHz)
  RFIDFrequencyChina2 = 0x02,
/// 0x04: Europe frequency range (865~868MHz)
  RFIDFrequencyEurope = 0x04,
/// 0x08: United States frequency range (902~928MHz)
  RFIDFrequencyUSA = 0x08,
/// 0x16: Korea frequency range (917~923MHz)
  RFIDFrequencyKorea = 0x16,
/// 0x32: Japan frequency range (952~953MHz)
  RFIDFrequencyJapan = 0x32,
/// 0x33: South Africa frequency range (915~919MHz)
  RFIDFrequencySouthAfrica = 0x33,
/// 0x34: China Taiwan frequency range (920~928MHz)
  RFIDFrequencyTaiwan = 0x34,
/// 0x35: Vietnam frequency range (918~923MHz)
  RFIDFrequencyVietnam = 0x35,
/// 0x36: Peru frequency range (915MHz~928MHz)
  RFIDFrequencyPeru = 0x36,
/// 0x37: Russia frequency range (860~867.6MHz)
  RFIDFrequencyRussia = 0x37,
/// 0x3B: Malaysia frequency range (919~923MHz)
  RFIDFrequencyMalaysia = 0x3B,
/// 0x3C: Brazil frequency range
  RFIDFrequencyBrazil = 0x3C,
/// 0x3D: ETSI Upper frequency range (915~921MHz)
  RFIDFrequencyETSI_UPPER = 0x3D,
/// 0x3E: Australia frequency range (920~926MHz)
  RFIDFrequencyAustralia = 0x3E,
/// 0x3F: Indonesia frequency range (920~923MHz)
  RFIDFrequencyIndonesia = 0x3F,
/// 0x40: Israel frequency
  RFIDFrequencyIsrael = 0x40,
/// 0x41: China Hong Kong frequency
  RFIDFrequencyHongKong = 0x41,
/// 0x42: New Zealand frequency
  RFIDFrequencyNewZealand = 0x42,
};

/// Gen2
SWIFT_CLASS("_TtC10RFIDBleSDK8RFIDGen2")
@interface RFIDGen2 : NSObject
/// Target Setting: Target Parameter for the select command.  see <code>SelectTarget-swift.enum</code>.<br/>
/// Target 设置：select 命令的 Target 参数. 具体见 <code>SelectTarget-swift.enum</code>.
@property (nonatomic) NSInteger selectTarget;
/// Action Setting: Action Parameter for the select command, valid range: 0 ~ 7.<br/>
/// Action 设置：select 命令的 Action 参数，可取范围：0 ~ 7
@property (nonatomic) NSInteger selectAction;
/// T Setting: Truncate Parameter for the select command, see <code>SelectTruncate-swift.enum</code>.<br/>
/// T 设置：select 命令的Truncate 参数，具体见 <code>SelectTruncate-swift.enum</code>.
@property (nonatomic) NSInteger selectTruncate;
/// Q Setting, see <code>Q-swift.enum</code><br/>
/// Q 设置，见<code>Q-swift.enum</code>
/// note:
/// Under the Fixed Q algorithm, Q is fixed to StartQ , MinQ and MaxQ are ignored.<br/>
/// 在固定 Q 算法下，Q 固定为 StartQ，忽略 MinQ 和 MaxQ。
@property (nonatomic) NSInteger q;
/// StartQ Setting, available range: 0~15<br/>
/// StartQ设置，可取范围：0~15
@property (nonatomic) NSInteger startQ;
/// MinQ Setting, available range: 0~15<br/>
/// MinQ设置，可取范围：0~15
@property (nonatomic) NSInteger minQ;
/// MaxQ Setting, available range: 0~15<br/>
/// MaxQ设置，可取范围：0~15
@property (nonatomic) NSInteger maxQ;
/// D Setting: DR Parameter for the query command, see <code>QueryDR-swift.enum</code><br/>
/// D 设置：query 命令的 DR 参数，见<code>QueryDR-swift.enum</code>
@property (nonatomic) NSInteger queryDR;
/// Coding Setting: M Parameter for the query command, see <code>QueryM-swift.enum</code><br/>
/// Coding设置：query 命令的 M 参数，见<code>QueryM-swift.enum</code>
@property (nonatomic) NSInteger queryM;
/// P Setting: TRext Parameter for the query command, see <code>QueryTRext-swift.enum</code><br/>
/// P 设置：query 命令的 TRext 参数，见<code>QueryTRext-swift.enum</code>
@property (nonatomic) NSInteger queryTRext;
/// sel Setting: sel Parameter for the query command, see <code>QuerySel-swift.enum</code><br/>
/// sel 设置：query 命令的 sel 参数，见<code>QuerySel-swift.enum</code>
@property (nonatomic) NSInteger querySel;
/// Ses Setting: session Parameter for the query command, see <code>QuerySession-swift.enum</code><br/>
/// ses 设置：query 命令的 session 参数，见<code>QuerySession-swift.enum</code>
@property (nonatomic) NSInteger querySession;
/// G Setting: Target Parameter for the query command, see <code>QueryTarget-swift.enum</code><br/>
/// G 设置：query 命令的 Target 参数，见<code>QueryTarget-swift.enum</code>
@property (nonatomic) NSInteger queryTarget;
/// LF Setting (reserved), valid range: 0 to 7
/// LF 设置（预留），可取范围：0~7
@property (nonatomic) NSInteger linkFrequency;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SelectTarget, open) {
  SelectTargetS0 = 0x00,
  SelectTargetS1 = 0x01,
  SelectTargetS2 = 0x02,
  SelectTargetS3 = 0x03,
  SelectTargetSL = 0x04,
};

typedef SWIFT_ENUM(NSInteger, SelectTruncate, open) {
/// Disable truncation
  SelectTruncateDisable = 0,
/// Enable truncation
  SelectTruncateEnable = 1,
};

typedef SWIFT_ENUM(NSInteger, Q, open) {
/// Static Q algorithm
  QStatic = 0,
/// Dynamic Q algorithm
  QDynamic = 1,
};

typedef SWIFT_ENUM(NSInteger, QueryDR, open) {
  QueryDRDR_8 = 0,
  QueryDRDR_64_3 = 1,
};

typedef SWIFT_ENUM(NSInteger, QueryM, open) {
  QueryMFM0 = 0,
  QueryMMiller2 = 1,
  QueryMMiller4 = 2,
  QueryMMiller8 = 3,
};

typedef SWIFT_ENUM(NSInteger, QueryTRext, open) {
  QueryTRextNoPilot = 0,
  QueryTRextUsePilot = 1,
};

typedef SWIFT_ENUM(NSInteger, QuerySel, open) {
  QuerySelAll = 0,
  QuerySelAll2 = 1,
  QuerySelNotSL = 2,
  QuerySelSL = 3,
};

typedef SWIFT_ENUM(NSInteger, QuerySession, open) {
  QuerySessionS0 = 0,
  QuerySessionS1 = 1,
  QuerySessionS2 = 2,
  QuerySessionS3 = 3,
};

typedef SWIFT_ENUM(NSInteger, QueryTarget, open) {
  QueryTargetA = 0,
  QueryTargetB = 1,
};

/// Location data object.<br/>
/// 定位数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDLocateInfo")
@interface RFIDLocateInfo : NSObject <NSCopying>
/// RFID tag data.
/// RFID标签数据
@property (nonatomic, strong) RFIDTagInfo * _Nonnull tag;
/// Tag signal value, 0 to 100.<br/>
/// 标签信号值，0~100
@property (nonatomic) double value;
/// Tag orientation.<br/>
/// 标签方位
@property (nonatomic) double angle;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
- (nonnull instancetype)initWithTag:(RFIDTagInfo * _Nonnull)tag value:(double)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTag:(RFIDTagInfo * _Nonnull)tag angle:(double)angle value:(double)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Lock bank areas.
/// 可锁定区域
/// note:
/// TID can‘t be changed.<br/>
/// TID 不可修改.
typedef SWIFT_ENUM(NSInteger, RFIDLockBank, open) {
  RFIDLockBankKill = 0x10,
  RFIDLockBankAccess = 0x20,
  RFIDLockBankEPC = 0x30,
  RFIDLockBankUSER = 0x50,
};

/// Locking Operation Type<br/>
/// 锁定操作类型
typedef SWIFT_ENUM(NSInteger, RFIDLockMode, open) {
  RFIDLockModeOpen = 0x10,
  RFIDLockModeLock = 0x20,
  RFIDLockModePermanentOpen = 0x30,
  RFIDLockModePermanentLock = 0x40,
};

/// The bank area read during inventory.<br/>
/// 盘点时读取的区域
/// note:
/// Only when the inventoryBank property is set to EPC_TID_USER will the offset and length attributes take effect.<br/>
/// 只有inventoryBank属性为EPC_TID_USER时，offset和length属性才会生效
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDMemoryBank")
@interface RFIDMemoryBank : NSObject
/// Inventory bank, see <code>InventoryBank-swift.enum</code><br/>
/// 盘点区域，见<code>InventoryBank-swift.enum</code>
@property (nonatomic) NSInteger inventoryBank;
/// The offset address setting applies to:  USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 偏移地址，在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
@property (nonatomic) NSInteger offset;
/// The data length setting applies to: USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 数据长度。在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
@property (nonatomic) NSInteger length;
/// init Object.
/// \param bank The data area of the tag read during inventory. It can have the following values from <code>InventoryBank-swift.enum</code> : EPC (0), EPC+TID (1), EPC+TID+USER (2)、EPC_RESERVED (10).<br/>
/// 盘点时读取的标签数据区域，可取值为 <code>InventoryBank-swift.enum</code> 的 EPC (0)、EPC+TID (1)、EPC+TID+USER (2)、EPC_RESERVED (10)
///
- (nonnull instancetype)initWithBank:(NSInteger)bank OBJC_DESIGNATED_INITIALIZER;
/// init Object.
/// \param bank The data area of the tag read during inventory. see <code>InventoryBank-swift.enum</code>.<br/>
/// 盘点时读取的标签数据区域，见 <code>InventoryBank-swift.enum</code>
///
/// \param offset The offset address setting applies to:  USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 偏移地址，在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
///
/// \param length The data length setting applies to: USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 数据长度。在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
///
- (nonnull instancetype)initWithBank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The data area of the tag read during inventory.<br/>
/// 盘点时读取的标签数据区域
typedef SWIFT_ENUM(NSInteger, InventoryBank, open) {
/// 0: Read only EPC
  InventoryBankEPC = 0,
/// 1: EPC + TID
  InventoryBankEPC_TID = 1,
/// 2: EPC + TID + USER
  InventoryBankEPC_TID_USER = 2,
/// 10: EPC + RESERVED
  InventoryBankEPC_RESERVED = 0x0A,
};

/// RFLink<br/>
/// RF链路组合
typedef SWIFT_ENUM(NSInteger, RFIDRFLink, open) {
/// 0x00: PR_ASK/Miller8/160KHz
  RFIDRFLinkPR_ASK_Miller8_160KHz = 0x00,
/// 0x01: PR_ASK/Miller4/250KHz
  RFIDRFLinkPR_ASK_Miller4_250KHz = 0x01,
/// 0x02: PR_ASK/Miller4/320KHz
  RFIDRFLinkPR_ASK_Miller4_320KHz = 0x02,
/// 0x03: PR_ASK/Miller4/640KHz
  RFIDRFLinkPR_ASK_Miller4_640KHz = 0x03,
/// 0x04: PR_ASK/Miller2/320KHz
  RFIDRFLinkPR_ASK_Miller2_320KHz = 0x04,
/// 0x05: PR_ASK/Miller2/640KHz
  RFIDRFLinkPR_ASK_Miller2_640KHz = 0x05,
/// 0x0A: Gen2X/Miller8/160KHz
  RFIDRFLinkGen2X_Miller8_160KHz = 0x0A,
/// 0x0B: Gen2X/Miller4/250KHz
  RFIDRFLinkGen2X_Miller4_250KHz = 0x0B,
/// 0x0C: Gen2X/Miller4/320KHz
  RFIDRFLinkGen2X_Miller4_320KHz = 0x0C,
/// 0x0D: Gen2X/Miller4/640KHz
  RFIDRFLinkGen2X_Miller4_640KHz = 0x0D,
/// 0x0E: Gen2X/Miller2/320KHz
  RFIDRFLinkGen2X_Miller2_320KHz = 0x0E,
/// 0x0F: Gen2X/Miller2/640KHz
  RFIDRFLinkGen2X_Miller2_640KHz = 0x0F,
};

enum RFIDResultCode : NSInteger;
/// Return objects for SDK related requests.<br/>
/// SDK相关请求的返回对象
SWIFT_CLASS("_TtC10RFIDBleSDK10RFIDResult")
@interface RFIDResult : NSObject
/// Request response code. see <code>RFIDResultCode</code><br/>
/// 请求响应代码，具体见<code>RFIDResultCode</code>
@property (nonatomic, readonly) enum RFIDResultCode code;
/// Request response data,  the data will be of the corresponding data type based on the specific request.<br/>
/// 请求返回数据，会根据具体请求返回相应的数据类型
@property (nonatomic, readonly, strong) NSObject * _Nullable data;
- (nonnull instancetype)init:(enum RFIDResultCode)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(enum RFIDResultCode)code :(NSObject * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Result Code.<br/>
/// 结果代码.
/// note:
/// 0 indicates success, and values ​​less than 0 indicate failure. Different negative numbers represent different reasons for failure,
/// and positive numbers have specific meanings in specific interfaces.<br/>
/// 0 表示成功，小于 0 表示失败，不同的负数表示不同的失败原因，正数在特定接口有特定的含义.
typedef SWIFT_ENUM(NSInteger, RFIDResultCode, open) {
/// 1: Pending or in progress state. 待处理或进行中状态
  RFIDResultCodePending = 1,
/// 0: success  成功
  RFIDResultCodeSuccess = 0,
/// -1: failure  失败
  RFIDResultCodeFailure = -1,
/// -2: bluetooth is not connected.  蓝牙未连接
  RFIDResultCodeBleDisconnect = -2,
/// -3: request timeout.  请求超时
  RFIDResultCodeTimeout = -3,
/// -4: device is inventorying.  设备盘点中
  RFIDResultCodeInventorying = -4,
/// -5: radar localizing. 雷达定位中
  RFIDResultCodeRadarLocalizing = -5,
/// -6: localizing. 定位中
  RFIDResultCodeLocalizing = -6,
/// -8: barcode scanning. 条码扫描中
  RFIDResultCodeBarcodeScanning = -8,
/// -100: filter enable must be true. 过滤enable参数必须为true
  RFIDResultCodeFilterDisable = -100,
/// -101: filter bank error. 过滤bank参数错误
  RFIDResultCodeFilterBankError = -101,
/// -102: filter offset error. 过滤offset参数错误
  RFIDResultCodeFilterOffsetError = -102,
/// -103: filter length error. 过滤length参数错误
  RFIDResultCodeFilterLengthError = -103,
/// -104: filter data empty. 过滤data参数为空
  RFIDResultCodeFilterDataEmpty = -104,
/// -105: filter data error. 过滤data参数错误
  RFIDResultCodeFilterDataError = -105,
/// -150: bank error. bank参数错误
  RFIDResultCodeBankError = -150,
/// -151: offset error. offset参数错误
  RFIDResultCodeOffsetError = -151,
/// -152: length error. length参数错误
  RFIDResultCodeLengthError = -152,
/// -153: data empty. data参数为空
  RFIDResultCodeDataEmpty = -153,
/// -154: data error. data参数错误
  RFIDResultCodeDataError = -154,
/// -155: password empty. 密码为空
  RFIDResultCodePasswordEmpty = -155,
/// -156: password format error. 密码格式错误
  RFIDResultCodePasswordError = -156,
/// -157: Default password cannot be used. 不可使用默认密码
  RFIDResultCodePasswordDefaultDeny = -157,
/// -201: frequency invalid. 频率参数无效
  RFIDResultCodeFrequncyInvalid = -201,
/// -202: power invalid. 功率参数无效
  RFIDResultCodePowerInvalid = -202,
/// -203: protocol invalid. 协议参数无效
  RFIDResultCodeProtocolInvalid = -203,
/// -204: link invalid. 链路参数无效
  RFIDResultCodeLinkInvalid = -204,
/// -205: gen2 select action invalid. Gen2 SelectAction参数无效
  RFIDResultCodeGen2SelectActionInvalid = -205,
/// -206: gen2 startQ invalid. Gen2 startQ参数无效
  RFIDResultCodeGen2StartQInvalid = -206,
/// -207: gen2 minQ invalid. Gen2 minQ参数无效
  RFIDResultCodeGen2MinQInvalid = -207,
/// -208: gen2 maxQ invalid.  Gen2 maxQ参数无效
  RFIDResultCodeGen2MaxQInvalid = -208,
/// -209: gen2 LF invalid. Gen2 LF参数无效
  RFIDResultCodeGen2LFInvalid = -209,
/// -210: memory bank invalid. menmoryBank参数无效
  RFIDResultCodeMemoryBankInvalid = -210,
/// -211: memory offset invalid.  memoryOffset参数无效
  RFIDResultCodeMemoryOffsetInvalid = -211,
/// -212: memoryLength invalid.  memoryLength参数无效
  RFIDResultCodeMemoryLengthInvalid = -212,
/// -301: no tag found. 未找到标签
  RFIDResultCodeNoTagFound = -301,
/// -302: no privileges. 无权限
  RFIDResultCodeNoPrivileges = -302,
/// -303: memory overflow. 数据区超限
  RFIDResultCodeMemoryOverflow = -303,
/// -304: memory lock. 数据区被锁定
  RFIDResultCodeMemoryLock = -304,
/// -305: tag no reply. 标签无响应
  RFIDResultCodeTagNoReply = -305,
/// -306: password wrong. 密码不正确
  RFIDResultCodePasswordWrong = -306,
/// -307: buffer overflow. 缓冲区溢出
  RFIDResultCodeBufferOverflow = -307,
/// -308: no enough power on tag. 标签能量不足
  RFIDResultCodeNoEnoughPowerOnTag = -308,
/// -309: parse error.  解析错误
  RFIDResultCodeParseError = -309,
/// -310: operate fail.  操作失败
  RFIDResultCodeOperateFail = -310,
/// -311: lockMode error.  lockMode参数错误
  RFIDResultCodeLockModeError = -311,
/// -312: lockBank empty.  lockBank参数为空
  RFIDResultCodeLockBankEmpty = -312,
/// -313: lockBank error.  lockBank参数错误
  RFIDResultCodeLockBankError = -313,
/// -401: key parameter empty.  key参数为空
  RFIDResultCodeBarcodeKeyEmpty = -401,
/// -402: key parameter error.  key参数错误
  RFIDResultCodeBarcodeKeyError = -402,
/// -403: value parameter empty.  value参数为空
  RFIDResultCodeBarcodeValueEmpty = -403,
/// -404: value parameter error.  value参数错误
  RFIDResultCodeBarcodeValueError = -404,
/// -501: upgrade type parameter Error.  type参数错误
  RFIDResultCodeUpgradeTypeError = -501,
/// -502: upgrade file data is empty.  升级文件数据为空
  RFIDResultCodeUpgradeFileDataEmpty = -502,
/// -503: Failed to start the upgrade.  开启升级失败
  RFIDResultCodeUpgradeStartFailed = -503,
/// -504: Failed to send upgrade file data. 发送升级文件数据失败
  RFIDResultCodeUpgradeSendFileDataFailed = -504,
/// -505: Failed to stop the upgrade.  停止升级失败
  RFIDResultCodeUpgradeStopFailed = -505,
/// -506: Failed to open upgrade file.  升级文件打开失败
  RFIDResultCodeUpgradeFileOpenError = -506,
/// -507: Failed to upgrade bluetooth.  升级蓝牙失败
  RFIDResultCodeUpgradeBluetoothFail = -507,
};

/// UHF module working status.<br/>
/// UHF 模块工作状态
typedef SWIFT_ENUM(NSInteger, RFIDState, open) {
  RFIDStateStop = 0,
  RFIDStateInventory = 1,
  RFIDStateRadar = 2,
  RFIDStateLocation = 3,
};

/// RFID Tag object.<br/>
/// RFID标签数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK11RFIDTagInfo")
@interface RFIDTagInfo : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull reserved;
@property (nonatomic, readonly, copy) NSString * _Nonnull epc;
@property (nonatomic, readonly, copy) NSString * _Nonnull tid;
@property (nonatomic, readonly, copy) NSString * _Nonnull user;
@property (nonatomic, readonly, copy) NSString * _Nonnull pc;
@property (nonatomic) float rssi;
@property (nonatomic) NSInteger count;
/// Unit is seconds.  单位为秒
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
- (nonnull instancetype)initWithEpc:(NSString * _Nonnull)epc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEpc:(NSString * _Nonnull)epc tid:(NSString * _Nonnull)tid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReserved:(NSString * _Nonnull)reserved epc:(NSString * _Nonnull)epc tid:(NSString * _Nonnull)tid user:(NSString * _Nonnull)user pc:(NSString * _Nonnull)pc rssi:(float)rssi OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull tagDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Upgrade Type<br/>
/// 升级类型
typedef SWIFT_ENUM(NSInteger, RFIDUpgradeType, open) {
/// 0: Mainboard
  RFIDUpgradeTypeMainboard = 0,
/// 1: UHF
  RFIDUpgradeTypeUHF = 1,
/// 2: Bluetooth
  RFIDUpgradeTypeBluetooth = 2,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef RFIDBLESDK_SWIFT_H
#define RFIDBLESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RFIDBleSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSURL;
@class NSString;
/// Logging tool.<br/>
/// 日志工具.
/// Logging tool, you can control whether to display the SDK running log to the console and save it to a file.
/// SDK logging is turned off by default, enable saveLog will only be saved to the user’s cell phone APP black box, which is convenient to use for troubleshooting, and will not leak any data.
/// 日志工具，可控制是否将SDK运行日志显示到控制台和保存到文件中。SDK日志默认关闭的，启用saveLog也只会保存到用户手机APP黑盒之中，方便用于排查问题，不会泄露任何数据。
/// remark:
/// Currently, the LogUtil has very few features, which will be added gradually if necessary.<br/>
/// 目前日志工具的功能很少，后续需要再逐步添加
SWIFT_CLASS("_TtC10RFIDBleSDK7LogUtil")
@interface LogUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LogUtil * _Nonnull shared;)
+ (LogUtil * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Whether to print logs to console. Default false.<br/>
/// 是否打印日志到控制台，默认关闭
@property (nonatomic) BOOL showLog;
/// Whether to save logs to file. Default false.<br/>
/// 是否保存日志到文件中，默认关闭
@property (nonatomic) BOOL saveLog;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Clear all log files.<br/>
/// 清除所有日志文件
- (void)clearAllLogs;
/// Get a list of all log files.<br/>
/// 获取所有日志文件的列表
- (NSArray<NSURL *> * _Nonnull)getLogFiles SWIFT_WARN_UNUSED_RESULT;
/// Returns the contents of the specified log file.<br/>
/// 返回指定日志文件的内容
- (NSString * _Nullable)readLogFileContent:(NSURL * _Nonnull)logFilePath SWIFT_WARN_UNUSED_RESULT;
@end

/// Tag storage area<br/>
/// 标签存储区
typedef SWIFT_ENUM(NSInteger, RFIDBank, open) {
/// 0: RESERVED
/// note:
/// Typically, there are 2 words (8 characters), with the first 8 characters being the kill password and the last 8 characters being the access password.<br/>
/// 一般有4个字(16个字符)，前8位为销毁密码，后8位为访问密码
  RFIDBankRESERVED = 0,
/// 1: EPC
  RFIDBankEPC = 1,
/// 2: TID
/// note:
/// Normally, it is of a fixed length of 6 words.<br/>
/// 一般固定长度6个字
  RFIDBankTID = 2,
/// 3: USER
  RFIDBankUSER = 3,
};

@class NSData;
/// Barcode data object.<br/>
/// 扫码数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK15RFIDBarcodeInfo")
@interface RFIDBarcodeInfo : NSObject
/// Whether the data of this barcode is valid.<br/>
/// 本标签数据是否有效
@property (nonatomic, readonly) BOOL result;
/// Barcode string, default parsing with UHF-8.<br/>
/// barcode字符串，默认以UHF-8解析
@property (nonatomic, readonly, copy) NSString * _Nonnull barcode;
/// Barcode Data object, which can be parsed according to other formats as needed.<br/>
/// Barcode Data对象，可根据需要按照其他格式来解析
@property (nonatomic, readonly, copy) NSData * _Nonnull barcodeData;
/// Barcode Type, see <code>RFIDBarcodeTypeInSSIID</code><br/>
/// Barcode标签类型，见<code>RFIDBarcodeTypeInSSIID</code>
@property (nonatomic, readonly) NSInteger ssiId;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class NSNumber;
@class RFIDTagInfo;
enum RFIDState : NSInteger;
/// SDK manager, all RFID related interfaces are open here, use <code>RFIDBleManager.shared.xxx</code> to call it.<br/>
/// SDK管理器，所有RFID相关接口均在此开放，使用 <code>RFIDBleManager.shared.xxx</code> 调用即可.
/// <ol>
///   <li>
///     SDK needs to use Bluetooth related functions, please ensure that the project running has requested Bluetooth permissions.
///     If you need to use radar positioning-related features, you will also need to request location permissions to obtain the phone’s azimuth.
///   </li>
///   <li>
///     Most SDK methods block the thread. It’s recommended to call them in background threads.
///     However, it’s important to note that the module’s ability to process commands is limited.
///     For commands in the <code>UHFProtocol</code> protocol, the module can only process one at a time. Therefore, avoid sending multiple commands simultaneously.
///   </li>
/// </ol>
/// <hr/>
/// <ol>
///   <li>
///     SDK需要使用蓝牙相关功能，请确保运行项目申请了蓝牙权限。若需要使用雷达定位相关功能，还需要申请定位权限以获取手机的方位角。
///   </li>
///   <li>
///     SDK的相关方法一般都会阻塞线程，建议在后台线程中调用。不过需要注意，设备的模块处理命令的能力是有限的，对于<code>UHFProtocol</code>协议中的命令，模块一次只能处理一个，因此不要同时发送多个命令。
///   </li>
/// </ol>
/// \code
/// // It's okay to send multiple commands consecutively in the same thread,
/// // as commands will block and wait.
/// // 同一线程中可以连续发送多个命令，因为命令会阻塞等待
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getFrequency()
///     RFIDBleManager.shared.getPower()
///     RFIDBleManager.shared.getRFLink()
///     // ....
/// }
///
/// // Avoid sending multiple commands simultaneously, 
/// // because the module cannot process multiple commands at the same time.
/// // 不可以同时发送多个命令，因为模块不能同时处理多条命令
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getFrequency()
/// }
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getPower()
/// }
/// DispatchQueue.global().async {
///     RFIDBleManager.shared.getRFLink()
/// }
///
/// \endcode
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDBleManager")
@interface RFIDBleManager : NSObject
/// SDK singleton object.<br/>
/// SDK单例对象
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RFIDBleManager * _Nonnull shared;)
+ (RFIDBleManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Scan search Bluetooth peripheral callback.<br/>
/// 扫描搜索蓝牙外设回调
/// see <a href="https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/centralmanager(_:diddiscover:advertisementdata:rssi:)">https://developer.apple.com/documentation/corebluetooth/cbcentralmanagerdelegate/centralmanager(_:diddiscover:advertisementdata:rssi:)</a>
/// This block has the following parameters:
/// <ul>
///   <li>
///     <code>peripheral</code>: peripheral object.<br/>
///     外设对象.
///   </li>
///   <li>
///     <code>advertisementData</code>: advertisementData of peripheral.<br/>
///     外设的广播数据.
///   </li>
///   <li>
///     <code>RSSI</code>: rssi of  peripheral.<br/>
///     外设广播信号.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable blePeripheralsBlock)(CBPeripheral * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSNumber * _Nonnull);
/// Bluetooth peripheral state update callback.<br/>
/// 蓝牙状态更新回调
/// This block has the following parameters:
/// <ul>
///   <li>
///     <code>peripheral</code>: Peripheral object.<br/>
///     外设对象.
///   </li>
///   <li>
///     <code>state</code>: Peripheral state.<br/>
///     外设状态.
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable bleStateUpdateBlock)(CBPeripheral * _Nonnull, CBPeripheralState);
/// RFID scan tag callback.<br/>
/// RFID扫描标签回调
@property (nonatomic, copy) void (^ _Nullable bleRFIDTagInfoBlock)(RFIDTagInfo * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Bluetooth peripheral currently being connected.<br/>
/// 正在连接的蓝牙设备
@property (nonatomic, readonly, strong) CBPeripheral * _Nullable peripheral;
/// Set Bluetooth peripheral button event callback.<br/>
/// 设置蓝牙外设按键事件回调
/// \param keyDownBlock Key Down event callback block.<br/>
/// 按下事件回调block
///
/// \param keyUpBlock Key Up event callback block.<br/>
/// 抬起事件回调block
///
- (void)setKeyEventWithKeyDownBlock:(void (^ _Nullable)(NSInteger))keyDownBlock keyUpBlock:(void (^ _Nullable)(NSInteger))keyUpBlock;
- (enum RFIDState)getInventoryFlag SWIFT_WARN_UNUSED_RESULT;
@end

@class CBUUID;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// Search for Peripherals.<br/>
/// 搜索蓝牙外设
/// Please refer to serviceUUIDS and options parameters:<br/>
/// <a href="https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/scanforperipherals(withservices:options:)">https://developer.apple.com/documentation/corebluetooth/cbcentralmanager/scanforperipherals(withservices:options:)</a><br/>
/// serviceUUIDS和options参数参考上方链接
/// note:
/// The blePeripheralsBlock parameter can be set separately or passed directly into this method, with the same effect.<br/>
/// blePeripheralsBlock参数可以单独设置，也可以直接在本方法中传入，效果相同
/// \param blePeripheralsBlock Scan search Bluetooth peripheral callback Block.<br/>
/// 扫描搜索蓝牙外设回调Block
///
- (void)scanForPeripheralsWithServiceUUIDS:(NSArray<CBUUID *> * _Nullable)serviceUUIDS options:(NSDictionary<NSString *, id> * _Nullable)options :(void (^ _Nullable)(CBPeripheral * _Nonnull, NSDictionary<NSString *, id> * _Nonnull, NSNumber * _Nonnull))blePeripheralsBlock;
/// Stop searching for Peripherals.<br/>
/// 停止搜索蓝牙外设
- (void)stopForPeripherals;
/// Connect to a Peripheral.<br/>
/// 连接蓝牙外设
- (void)connectPeripheral:(CBPeripheral * _Nonnull)peripheral bleDidFailToConnectBlock:(void (^ _Nullable)(CBPeripheral * _Nonnull, NSError * _Nullable))bleDidFailToConnectBlock;
/// DisConnect to a Peripheral.<br/>
/// 断开蓝牙外设
- (void)disconnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// Retrieve Connected Peripherals.<br/>
/// 检索已连接的外设
- (NSArray<CBPeripheral *> * _Nonnull)retrieveConnectedPeripherals SWIFT_WARN_UNUSED_RESULT;
@end

@class RFIDResult;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// start scanning barcodes.<br/>
/// 开始扫描条码。
/// <ul>
///   <li>
///     When scanning QR code or barcode, scanner param can’t be set or get.
///   </li>
///   <li>
///     The SDK cannot guarantee the correctness of the continuous and unique parameters of the scanner,
///     so it is not recommended to use this interface.<br/>
///     If continuous scanning without repetition is required, before calling this interface,
///     please ensure that the “continue” and “unique” parameters are set to 01 using the  <code>setBarcodeParameter(key:value:)</code> interface.
///   </li>
///   <li>
///     在扫描二维码或条码时，无法设置和获取扫描头相关参数，如BarcodeType.
///   </li>
///   <li>
///     SDK 无法保证扫描头continue和unique参数的正确，不建议使用。<br/>
///     若确实需要连续扫描不重复的功能，调用本接口前，请确保使用<code>setBarcodeParameter(key:value:)</code>接口将
///     “continue” 和 “unique” 参数设置为 01。
///   </li>
/// </ul>
/// \code
/// RFIDBleManager.shared.setBarcodeParameter("F189", "01") // continue
/// RFIDBleManager.shared.setBarcodeParameter("F1D3", "01") // unique
/// // RFIDBleManager.shared.startBarcode(continuous: continue, unique: unique, barcodeBlock:...)
///
/// \endcode\param continuous Continuous scanning or not.<br/>
/// 是否连续扫描.
///
/// \param unique Whether the scanned label is unique or not, this parameter is only valid for continuous scanning.<br/>
/// 扫描标签是否可重复，该参数只有连续扫描时生效.
///
/// \param barcodeBlock Scan Data Callbacks.<br/>
/// 扫描数据回调
///
///
/// returns:
/// Open Scan Results. Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 开启扫描结果，成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)startBarcodeWithContinuous:(BOOL)continuous unique:(BOOL)unique barcodeBlock:(void (^ _Nonnull)(RFIDBarcodeInfo * _Nonnull))barcodeBlock SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use startBarcode(barcodeBlock:(_ barcode: RFIDBarcodeInfo) -> Void) instead");
/// start scanning barcodes.<br/>
/// 开始扫描条码。
/// When scanning QR codes or barcodes, it’s not possible to set or retrieve parameters related to the scanner head, such as BarcodeType.<br/>
/// 在扫描二维码或条码时，无法设置和获取扫描头相关参数，如BarcodeType.
/// \param barcodeBlock Scan Data Callbacks.<br/>
/// 扫描数据回调
///
///
/// returns:
/// Open Scan Results. Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 开启扫描结果，成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)startBarcodeWithBarcodeBlock:(void (^ _Nonnull)(RFIDBarcodeInfo * _Nonnull))barcodeBlock SWIFT_WARN_UNUSED_RESULT;
/// stop scanning barcodes.<br/>
/// 停止扫描条码
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopBarcode SWIFT_WARN_UNUSED_RESULT;
/// settings Recognize barcode type when scanning.<br/>
/// 设置 扫码时识别条码类型
/// \param barcodeType true: open, false: close
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBarcodeType:(BOOL)barcodeType SWIFT_WARN_UNUSED_RESULT;
/// Get BarcodeType parameter.<br/>
/// 获取BarcodeType参数
///
/// returns:
/// If the acquisition is successful, the data field of <code>RFIDResult</code> is Bool.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Bool.
- (RFIDResult * _Nonnull)getBarcodeType SWIFT_WARN_UNUSED_RESULT;
/// set Barcode Parameter.
/// \param key key, Requires hexadecimal digits.
///
/// \param value value, Requires hexadecimal digits.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure) or other result code<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBarcodeParameterWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// get Barcode Parameter
/// \param key key, Requires hexadecimal digits.
///
///
/// returns:
/// If the acquisition is successful, the data field of <code>RFIDResult</code> is the value of Data type.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Data类型的value值.
- (RFIDResult * _Nonnull)getBarcodeParameter:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// Set Rssi.<br/>
/// 设置Rssi
/// \param rssi true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setRssi:(BOOL)rssi SWIFT_WARN_UNUSED_RESULT;
/// Get Rssi.<br/>
/// 获取Rssi
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Bool.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Bool
- (RFIDResult * _Nonnull)getRssi SWIFT_WARN_UNUSED_RESULT;
/// Set peripheral buzzer.<br/>
/// 设置外设蜂鸣器.
/// \param buzzer true: Open buzzer;  false: Close buzzer.<br/>
/// true: 打开蜂鸣器;  false: 关闭蜂鸣器.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBuzzer:(BOOL)buzzer SWIFT_WARN_UNUSED_RESULT;
/// Get peripheral buzzer.<br/>
/// 获取外设蜂鸣器.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: buzzer is Open;  false: buzzer is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: 蜂鸣器打开;  false: 蜂鸣器关闭.
- (RFIDResult * _Nonnull)getBuzzer SWIFT_WARN_UNUSED_RESULT;
/// Set the buzzer volume.
/// note:
/// This interface requires custom mainboard firmware support.<br/>
/// 该接口需要定制主板固件的支持.
/// \param volume 0~100
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setBuzzerVolume:(NSInteger)volume SWIFT_WARN_UNUSED_RESULT;
/// Get the buzzer volume (0-100).
/// note:
/// This interface requires custom mainboard firmware support.<br/>
/// 该接口需要定制主板固件的支持.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getBuzzerVolume SWIFT_WARN_UNUSED_RESULT;
/// Get Bluetooth version.<br/>
/// 获取蓝牙版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is <code>RFIDBleVersion</code>.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>RFIDBleVersion</code>对象.
- (RFIDResult * _Nonnull)getBluetoothVersion SWIFT_WARN_UNUSED_RESULT;
/// Get motherboard version.<br/>
/// 获取主板版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String.
- (RFIDResult * _Nonnull)getMainboardVersion SWIFT_WARN_UNUSED_RESULT;
/// Get Battery, return the percentage integer<br/>
/// 获取电量，返回百分比整数
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getBattery SWIFT_WARN_UNUSED_RESULT;
/// Set key_mode param.<br/>
/// 设置key_mode 参数.
/// KeyMode参数作用是控制蓝牙设备扫描按键的触发模式。<br/>
/// 当 KeyMode = 0 时，蓝牙扫描按键抬起时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyUpBlock</code> 回调中返回键值 1，按下事件不触发；<br/>
/// 当 KeyMode = 1 时，蓝牙扫描按键按下时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyDownBlock</code> 回调中返回键值 3，抬起时会在 <code>keyUpBlock</code> 回调中返回键值 4 ；
/// \param keyMode 0 or 1.<br/>
/// 0: Only lift keycode 1
///
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)setKeyMode:(NSInteger)keyMode SWIFT_WARN_UNUSED_RESULT;
/// Get key_mode param.<br/>
/// 获取 key_mode 参数.
/// KeyMode参数作用是控制蓝牙设备扫描按键的触发模式。<br/>
/// 当 KeyMode = 0 时，蓝牙扫描按键抬起时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyUpBlock</code> 回调中返回键值 0，按下事件无返回；<br/>
/// 当 KeyMode = 1 时，蓝牙扫描按键按下时会在 <code>RFIDBleManager.shared.setKeyEvent</code> 的 <code>keyDownBlock</code> 回调中返回键值 3，抬起时会在 <code>keyUpBlock</code> 回调中返回键值 4 ；
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>Int</code>.
- (RFIDResult * _Nonnull)getKeyMode SWIFT_WARN_UNUSED_RESULT;
/// Set turn_key param.<br/>
/// 设置turn_key 参数.
/// \param turnKey 0 or 1.<br/>
/// 0: Disable powerkey switch between UHF and barcode in HID mode.<br/>
/// 1: Enable powerkey switch between UHF and barcode in HID mode.
///
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)setTurnKey:(NSInteger)turnKey SWIFT_WARN_UNUSED_RESULT;
/// Get turn_key param.<br/>
/// 获取turn_key 参数.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int.
- (RFIDResult * _Nonnull)getTurnKey SWIFT_WARN_UNUSED_RESULT;
/// Get the serial number.<br/>
/// 获取设备序列号.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is <code>String</code>.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为<code>String</code>.
- (RFIDResult * _Nonnull)getSN SWIFT_WARN_UNUSED_RESULT;
/// Upgrade mainboard, UHF or bluetooth. The upgrade process and results are returned in the callback.<br/>
/// 升级主板、UHF，升级过程和结果在回调中返回.
/// note:
/// Bluetooth firmware upgrade is not supported in the current version. Custom implementation can be achieved through the <a href="https://github.com/NordicSemiconductor/IOS-DFU-Library">IOS DFU Library</a>.<br/>
/// 当前版本SDK不支持蓝牙升级，可以使用 <a href="https://github.com/NordicSemiconductor/IOS-DFU-Library">IOS DFU Library</a> 自行实现
/// \param type see <code>RFIDUpgradeType</code>.<br/>
/// 0: Mainboard;<br/>
/// 1: UHF;<br/>
/// 2: Bluetooth. Not Support now !
///
/// \param fileURL Upgrade file data.<br/>
/// 升级文件数据.
///
/// \param callback Upgrade result callback:<br/>
/// Upgrade success - RFIDResult(.success)<br/>
/// Upgrade failure - RFIDResult(.failure) …<br/>
/// Upgrading - RFIDResult(.pending, data:”(progress)”) ,  progress: 0-100<br/>
/// 升级结果回调:<br/>
/// 升级成功 - RFIDResult(.success)<br/>
/// 升级失败 - RFIDResult(.failure) …<br/>
/// 升级中 - RFIDResult(.pending,  data:”(progress)”) ,  progress: 0-100
///
- (void)upgradeWithType:(NSInteger)type fileData:(NSData * _Nonnull)fileData callback:(void (^ _Nonnull)(RFIDResult * _Nonnull))callback;
@end

@class RFIDFilter;
@class RFIDGen2;
@class RFIDMemoryBank;
@class RFIDLocateInfo;
@interface RFIDBleManager (SWIFT_EXTENSION(RFIDBleSDK))
/// singleInventory<br/>
/// 单步盘点
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
///
/// returns:
/// If the tag is successfully found, the data field in the <code>RFIDResult</code> parameter is returned as the <code>RFIDTagInfo</code> tag object.<br/>
/// 若成功找到标签，则返回<code>RFIDResult</code>参数中data字段为<code>RFIDTagInfo</code>标签对象。
- (RFIDResult * _Nonnull)singleInventoryWithFilter:(RFIDFilter * _Nullable)filter SWIFT_WARN_UNUSED_RESULT;
/// startInventory<br/>
/// 开启盘点
/// <ul>
///   <li>
///     This function only returns the result of turning on the inventory, and the tag data inventoried is returned in <code>BleRFIDTagInfoBlock</code>;
///   </li>
///   <li>
///     The BleRFIDTagInfoBlock parameter can be passed directly in this method, or can be set separately, with the same effect.
///   </li>
///   <li>
///     Once inventorying is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     该函数只返回开启盘点的结果，盘点到的标签数据在 <code>BleRFIDTagInfoBlock</code> 回调中返回；
///   </li>
///   <li>
///     BleRFIDTagInfoBlock参数可以直接在本方法中传入，也可以可以单独设置，效果相同；
///   </li>
///   <li>
///     开启盘点后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param bleRFIDTagInfoBlock Inventory label data callback.<br/>
/// 盘点标签数据回调.
///
///
/// returns:
/// Returns the results of opening the inventory.<br/>
/// 返回开启盘点的结果
- (RFIDResult * _Nonnull)startInventoryWithFilter:(RFIDFilter * _Nullable)filter bleRFIDTagInfoBlock:(void (^ _Nullable)(RFIDTagInfo * _Nonnull))bleRFIDTagInfoBlock SWIFT_WARN_UNUSED_RESULT;
/// stopInventory.<br/>
/// 停止盘点
///
/// returns:
/// Return to Stop Inventory Result.<br/>
/// 返回停止盘点结果.
- (RFIDResult * _Nonnull)stopInventory SWIFT_WARN_UNUSED_RESULT;
/// Read Tag.<br/>
/// 读标签.
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param bank Read bank of Tag. see <code>RFIDBank</code><br/>
/// 读取标签的存储区. 具体见<code>RFIDBank</code>
///
/// \param offset The offset address to be read, in unit of word.<br/>
/// 读取的偏移地址，单位为字.
///
/// \param length The length address to be read, in unit of bit.<br/>
/// 读取的长度，单位为字.
///
/// \param password Access password.<br/>
/// 访问密码
///
///
/// returns:
/// If the read is successful, the data field of the returned <code>RFIDResult</code> will be a String type containing the tag data.<br/>
/// 如果读取成功，返回的<code>RFIDResult</code>的data字段为String类型标签数据
- (RFIDResult * _Nonnull)readDataWithFilter:(RFIDFilter * _Nonnull)filter bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Write data to Tag.<br/>
/// 写标签.
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param bank The tag bank to be written. see <code>RFIDBank</code><br/>
/// 写入的标签存储区. 具体见<code>RFIDBank</code>
///
/// \param offset The offset address to be written, in unit of word.<br/>
/// 写入的偏移地址，单位为字.
///
/// \param length The length address to be written, in unit of bit.<br/>
/// 写入的长度，单位为字.
///
/// \param password Access password.<br/>
/// 访问密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)writeDataWithFilter:(RFIDFilter * _Nonnull)filter bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length password:(NSString * _Nonnull)password data:(NSString * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Lock the tag.<br/>
/// 锁定标签
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param lockMode Locking Operation Type . see <code>RFIDLockMode</code><br/>
/// 锁定操作类型. 具体见<code>RFIDLockMode</code>
///
/// \param lockBank Lock bank areas,  see <code>RFIDLockBank</code>.<br/>
/// 可锁定区域， 具体见<code>RFIDLockBank</code>
///
/// \param password lock password. Can’t use default password.<br/>
/// 锁定密码，不可使用默认密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)lockMemWithFilter:(RFIDFilter * _Nonnull)filter lockMode:(NSInteger)lockMode lockBank:(NSArray<NSNumber *> * _Nonnull)lockBank password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Kill the tag.<br/>
/// 销毁标签
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤.
///
/// \param password lock password. Can’t use default password.<br/>
/// 锁定密码，不可使用默认密码
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)killTagWithFilter:(RFIDFilter * _Nonnull)filter password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// Set module frequency.<br/>
/// 设置模块频段
/// \param frequency see <code>RFIDFrequency</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setFrequency:(NSInteger)frequency SWIFT_WARN_UNUSED_RESULT;
/// Get module frequency.<br/>
/// 获取模块频段
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be a Int type containing the frequency. see <code>RFIDFrequency</code><br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型频段值，具体见<code>RFIDFrequency</code>
- (RFIDResult * _Nonnull)getFrequency SWIFT_WARN_UNUSED_RESULT;
/// Set module power.<br/>
/// 设置模块功率
/// \param power 1~30
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setPower:(NSInteger)power SWIFT_WARN_UNUSED_RESULT;
/// Get module power.<br/>
/// 获取模块功率
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be a Int type containing the power value.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型功率值
- (RFIDResult * _Nonnull)getPower SWIFT_WARN_UNUSED_RESULT;
/// Set RF link combination.<br/>
/// 设置模块RF链路组合
/// \param rfLink see <code>RFIDRFLink</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setRFLink:(NSInteger)rfLink SWIFT_WARN_UNUSED_RESULT;
/// Get RF link combination.<br/>
/// 获取模块RF链路组合
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Int type containing the RF link, see <code>RFIDRFLink</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Int类型链路值，具体见<code>RFIDRFLink</code>
- (RFIDResult * _Nonnull)getRFLink SWIFT_WARN_UNUSED_RESULT;
/// Set Gen2.<br/>
/// 设置Gen2.
/// When setting a parameter of Gen2, it is recommended to get the gen2 parameter first, and then set the corresponding parameter according to the need, try not to affect other parameters. For example, set querySession and queryTarget:<br/>
/// 设置Gen2某个参数时，建议先获取gen2参数，然后再根据需要设置相应参数，尽量不要影响其他参数。例如设置querySession和queryTarget：
/// \code
/// let res = RFIDBleManager.shared.getGen2()
/// if res.code == .success, let gen2: RFIDGen2 = res.data as? RFIDGen2 {
///     gen2.querySession = session
///     gen2.queryTarget = target
///     _ = RFIDBleManager.shared.setGen2(gen2)
/// }
///
/// \endcode\param gen2 see <code>RFIDGen2</code>
///
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDGen2</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDGen2</code>类型对象
- (RFIDResult * _Nonnull)setGen2:(RFIDGen2 * _Nonnull)gen2 SWIFT_WARN_UNUSED_RESULT;
/// Get Gen2.<br/>
/// 获取Gen2
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDGen2</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDGen2</code>
- (RFIDResult * _Nonnull)getGen2 SWIFT_WARN_UNUSED_RESULT;
/// Set memoryBank.<br/>
/// 设置盘点模式
/// \param memoryBank see <code>RFIDMemoryBank</code>
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setMemoryBank:(RFIDMemoryBank * _Nonnull)memoryBank SWIFT_WARN_UNUSED_RESULT;
/// Get memoryBank.<br/>
/// 获取盘点模式
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be <code>RFIDMemoryBank</code>.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为<code>RFIDMemoryBank</code>
- (RFIDResult * _Nonnull)getMemoryBank SWIFT_WARN_UNUSED_RESULT;
/// Set FastID.<br/>
/// 设置FastID.
/// \param fastID true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setFastID:(BOOL)fastID SWIFT_WARN_UNUSED_RESULT;
/// Get FastID.<br/>
/// 获取FastID.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: FastID is Open;  false: FastID is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: FastID打开;  false: FastID关闭.
- (RFIDResult * _Nonnull)getFastID SWIFT_WARN_UNUSED_RESULT;
/// Set TagFocus.<br/>
/// 设置TagFocus.
/// \param tagFocus true: Open;  false: Close.
///
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)setTagFocus:(BOOL)tagFocus SWIFT_WARN_UNUSED_RESULT;
/// Get TagFocus.<br/>
/// 获取TagFocus.
///
/// returns:
/// If the get is successful, the data field of the returned <code>RFIDResult</code> will be Bool. true: TagFocus is Open;  false: TagFocus is Close.<br/>
/// 如果获取成功，返回的<code>RFIDResult</code>的data字段为Bool，true: TagFocus打开;  false: TagFocus关闭.
- (RFIDResult * _Nonnull)getTagFocus SWIFT_WARN_UNUSED_RESULT;
/// Start Radar Location.<br/>
/// 开启雷达扫描.
/// <ul>
///   <li>
///     Once radar localization is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     开启雷达定位后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param radarInfoBlock Radar tag information callback.<br/>
/// 雷达标签信息回调
///
/// \param radarAngleBlock Radar orientation information callback.<br/>
/// 雷达方位信息回调
///
- (RFIDResult * _Nonnull)startRadarLocationWithFilter:(RFIDFilter * _Nonnull)filter radarInfoBlock:(void (^ _Nonnull)(NSArray<RFIDLocateInfo *> * _Nonnull))radarInfoBlock radarAngleBlock:(void (^ _Nonnull)(double))radarAngleBlock SWIFT_WARN_UNUSED_RESULT;
/// Stop Radar Location.<br/>
/// 停止雷达扫描.
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopRadarLocation SWIFT_WARN_UNUSED_RESULT;
/// Set Dynamic Distance. The larger the parameter, the farther the device scans.<br/>
/// 设置动态距离。该参数越大，设备扫描距离越远。只有在盘点、雷达定位、定位过程中调用生效
/// \param distance Options: 5~30
///
- (void)setDynamicDistance:(NSInteger)distance;
/// startLocation.<br/>
/// 开启定位
/// <ul>
///   <li>
///     Once location is activated, the related methods in UHFProtocol can no longer be invoked.
///   </li>
///   <li>
///     开启定位后，UHFProtocol中的相关方法无法再被调用。
///   </li>
/// </ul>
/// \param filter Filter Tag. Optional parameter, no filter by default.<br/>
/// 过滤标签，可选参数，默认无过滤
///
/// \param locateInfoBlock Radar tag information callback.<br/>
/// 定位标签信息回调
///
- (RFIDResult * _Nonnull)startLocationWithFilter:(RFIDFilter * _Nonnull)filter locateInfoBlock:(void (^ _Nonnull)(RFIDLocateInfo * _Nonnull))locateInfoBlock SWIFT_WARN_UNUSED_RESULT;
/// Stop Location.<br/>
/// 停止定位扫描.
///
/// returns:
/// Success: RFIDResult(.success); Failure: RFIDResult(.failure)<br/>
/// 成功：RFIDResult(.success) ;  失败：RFIDResult(.failure)
- (RFIDResult * _Nonnull)stopLocation SWIFT_WARN_UNUSED_RESULT;
/// Get UHF hardware version.<br/>
/// 获取UHF硬件版本.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String
- (RFIDResult * _Nonnull)getUHFHardwareVersion SWIFT_WARN_UNUSED_RESULT;
/// Get UHF firmware version.<br/>
/// 获取UHF固件版本
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is String.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为String
- (RFIDResult * _Nonnull)getUHFFirmwareVersion SWIFT_WARN_UNUSED_RESULT;
/// Get module temperature.<br/>
/// 获取模块温度.
///
/// returns:
/// If the fetch is successful, the data field of <code>RFIDResult</code> is Int.<br/>
/// 如果获取成功，<code>RFIDResult</code>的data字段为Int
- (RFIDResult * _Nonnull)getUHFTemperature SWIFT_WARN_UNUSED_RESULT;
@end

/// Bluetooth version data object.<br/>
/// 蓝牙版本数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDBleVersion")
@interface RFIDBleVersion : NSObject
/// Hardware version information.
/// 硬件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull hardware;
/// Firmware version information.
/// 固件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull firmware;
/// Software version information.
/// 软件版本信息
@property (nonatomic, readonly, copy) NSString * _Nonnull software;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Filter parameters.<br/>
/// 过滤参数
/// note:
/// Filter bank parameter cannot use RESERVED.<br/>
/// 过滤bank参数不能使用RESERVED
SWIFT_CLASS("_TtC10RFIDBleSDK10RFIDFilter")
@interface RFIDFilter : NSObject
/// Whether to enable filtering.<br/>
/// 是否开启过滤
@property (nonatomic) BOOL enable;
/// Tag type, see <code>RFIDBank</code><br/>
/// 标签类型，见<code>RFIDBank</code>
@property (nonatomic) NSInteger bank;
/// Filter offset address.<br/>
/// 过滤起始地址
@property (nonatomic) NSInteger offset;
/// Filter length.<br/>
/// 过滤长度
@property (nonatomic) NSInteger length;
/// Filter data.<br/>
/// 过滤数据
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init:(BOOL)enable OBJC_DESIGNATED_INITIALIZER;
/// init Object.
/// \param enable 开启过滤标志.
///
/// \param bank The filtering area can take values from <code>RFIDBank</code> , which are EPC (1), TID (2), and USER (3).<br/>
/// 过滤区域，可取值为 <code>RFIDBank</code> 的 EPC (1)、TID (2)、USER (3)
///
/// \param offset Filter offset address.<br/>
/// 过滤偏移地址.
///
/// \param length Filter data length.<br/>
/// 过滤数据长度.
///
/// \param data FIlter data.<br/>
/// 过滤数据.
///
- (nonnull instancetype)initWithEnable:(BOOL)enable bank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length data:(NSString * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Module Frequency
/// 模块频段
typedef SWIFT_ENUM(NSInteger, RFIDFrequency, open) {
/// 0x01: China frequency range (840~845MHz)
  RFIDFrequencyChina1 = 0x01,
/// 0x02: China Plus frequency range (920~925MHz)
  RFIDFrequencyChina2 = 0x02,
/// 0x04: Europe frequency range (865~868MHz)
  RFIDFrequencyEurope = 0x04,
/// 0x08: United States frequency range (902~928MHz)
  RFIDFrequencyUSA = 0x08,
/// 0x16: Korea frequency range (917~923MHz)
  RFIDFrequencyKorea = 0x16,
/// 0x32: Japan frequency range (952~953MHz)
  RFIDFrequencyJapan = 0x32,
/// 0x33: South Africa frequency range (915~919MHz)
  RFIDFrequencySouthAfrica = 0x33,
/// 0x34: China Taiwan frequency range (920~928MHz)
  RFIDFrequencyTaiwan = 0x34,
/// 0x35: Vietnam frequency range (918~923MHz)
  RFIDFrequencyVietnam = 0x35,
/// 0x36: Peru frequency range (915MHz~928MHz)
  RFIDFrequencyPeru = 0x36,
/// 0x37: Russia frequency range (860~867.6MHz)
  RFIDFrequencyRussia = 0x37,
/// 0x3B: Malaysia frequency range (919~923MHz)
  RFIDFrequencyMalaysia = 0x3B,
/// 0x3C: Brazil frequency range
  RFIDFrequencyBrazil = 0x3C,
/// 0x3D: ETSI Upper frequency range (915~921MHz)
  RFIDFrequencyETSI_UPPER = 0x3D,
/// 0x3E: Australia frequency range (920~926MHz)
  RFIDFrequencyAustralia = 0x3E,
/// 0x3F: Indonesia frequency range (920~923MHz)
  RFIDFrequencyIndonesia = 0x3F,
/// 0x40: Israel frequency
  RFIDFrequencyIsrael = 0x40,
/// 0x41: China Hong Kong frequency
  RFIDFrequencyHongKong = 0x41,
/// 0x42: New Zealand frequency
  RFIDFrequencyNewZealand = 0x42,
};

/// Gen2
SWIFT_CLASS("_TtC10RFIDBleSDK8RFIDGen2")
@interface RFIDGen2 : NSObject
/// Target Setting: Target Parameter for the select command.  see <code>SelectTarget-swift.enum</code>.<br/>
/// Target 设置：select 命令的 Target 参数. 具体见 <code>SelectTarget-swift.enum</code>.
@property (nonatomic) NSInteger selectTarget;
/// Action Setting: Action Parameter for the select command, valid range: 0 ~ 7.<br/>
/// Action 设置：select 命令的 Action 参数，可取范围：0 ~ 7
@property (nonatomic) NSInteger selectAction;
/// T Setting: Truncate Parameter for the select command, see <code>SelectTruncate-swift.enum</code>.<br/>
/// T 设置：select 命令的Truncate 参数，具体见 <code>SelectTruncate-swift.enum</code>.
@property (nonatomic) NSInteger selectTruncate;
/// Q Setting, see <code>Q-swift.enum</code><br/>
/// Q 设置，见<code>Q-swift.enum</code>
/// note:
/// Under the Fixed Q algorithm, Q is fixed to StartQ , MinQ and MaxQ are ignored.<br/>
/// 在固定 Q 算法下，Q 固定为 StartQ，忽略 MinQ 和 MaxQ。
@property (nonatomic) NSInteger q;
/// StartQ Setting, available range: 0~15<br/>
/// StartQ设置，可取范围：0~15
@property (nonatomic) NSInteger startQ;
/// MinQ Setting, available range: 0~15<br/>
/// MinQ设置，可取范围：0~15
@property (nonatomic) NSInteger minQ;
/// MaxQ Setting, available range: 0~15<br/>
/// MaxQ设置，可取范围：0~15
@property (nonatomic) NSInteger maxQ;
/// D Setting: DR Parameter for the query command, see <code>QueryDR-swift.enum</code><br/>
/// D 设置：query 命令的 DR 参数，见<code>QueryDR-swift.enum</code>
@property (nonatomic) NSInteger queryDR;
/// Coding Setting: M Parameter for the query command, see <code>QueryM-swift.enum</code><br/>
/// Coding设置：query 命令的 M 参数，见<code>QueryM-swift.enum</code>
@property (nonatomic) NSInteger queryM;
/// P Setting: TRext Parameter for the query command, see <code>QueryTRext-swift.enum</code><br/>
/// P 设置：query 命令的 TRext 参数，见<code>QueryTRext-swift.enum</code>
@property (nonatomic) NSInteger queryTRext;
/// sel Setting: sel Parameter for the query command, see <code>QuerySel-swift.enum</code><br/>
/// sel 设置：query 命令的 sel 参数，见<code>QuerySel-swift.enum</code>
@property (nonatomic) NSInteger querySel;
/// Ses Setting: session Parameter for the query command, see <code>QuerySession-swift.enum</code><br/>
/// ses 设置：query 命令的 session 参数，见<code>QuerySession-swift.enum</code>
@property (nonatomic) NSInteger querySession;
/// G Setting: Target Parameter for the query command, see <code>QueryTarget-swift.enum</code><br/>
/// G 设置：query 命令的 Target 参数，见<code>QueryTarget-swift.enum</code>
@property (nonatomic) NSInteger queryTarget;
/// LF Setting (reserved), valid range: 0 to 7
/// LF 设置（预留），可取范围：0~7
@property (nonatomic) NSInteger linkFrequency;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SelectTarget, open) {
  SelectTargetS0 = 0x00,
  SelectTargetS1 = 0x01,
  SelectTargetS2 = 0x02,
  SelectTargetS3 = 0x03,
  SelectTargetSL = 0x04,
};

typedef SWIFT_ENUM(NSInteger, SelectTruncate, open) {
/// Disable truncation
  SelectTruncateDisable = 0,
/// Enable truncation
  SelectTruncateEnable = 1,
};

typedef SWIFT_ENUM(NSInteger, Q, open) {
/// Static Q algorithm
  QStatic = 0,
/// Dynamic Q algorithm
  QDynamic = 1,
};

typedef SWIFT_ENUM(NSInteger, QueryDR, open) {
  QueryDRDR_8 = 0,
  QueryDRDR_64_3 = 1,
};

typedef SWIFT_ENUM(NSInteger, QueryM, open) {
  QueryMFM0 = 0,
  QueryMMiller2 = 1,
  QueryMMiller4 = 2,
  QueryMMiller8 = 3,
};

typedef SWIFT_ENUM(NSInteger, QueryTRext, open) {
  QueryTRextNoPilot = 0,
  QueryTRextUsePilot = 1,
};

typedef SWIFT_ENUM(NSInteger, QuerySel, open) {
  QuerySelAll = 0,
  QuerySelAll2 = 1,
  QuerySelNotSL = 2,
  QuerySelSL = 3,
};

typedef SWIFT_ENUM(NSInteger, QuerySession, open) {
  QuerySessionS0 = 0,
  QuerySessionS1 = 1,
  QuerySessionS2 = 2,
  QuerySessionS3 = 3,
};

typedef SWIFT_ENUM(NSInteger, QueryTarget, open) {
  QueryTargetA = 0,
  QueryTargetB = 1,
};

/// Location data object.<br/>
/// 定位数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDLocateInfo")
@interface RFIDLocateInfo : NSObject <NSCopying>
/// RFID tag data.
/// RFID标签数据
@property (nonatomic, strong) RFIDTagInfo * _Nonnull tag;
/// Tag signal value, 0 to 100.<br/>
/// 标签信号值，0~100
@property (nonatomic) double value;
/// Tag orientation.<br/>
/// 标签方位
@property (nonatomic) double angle;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
- (nonnull instancetype)initWithTag:(RFIDTagInfo * _Nonnull)tag value:(double)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTag:(RFIDTagInfo * _Nonnull)tag angle:(double)angle value:(double)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Lock bank areas.
/// 可锁定区域
/// note:
/// TID can‘t be changed.<br/>
/// TID 不可修改.
typedef SWIFT_ENUM(NSInteger, RFIDLockBank, open) {
  RFIDLockBankKill = 0x10,
  RFIDLockBankAccess = 0x20,
  RFIDLockBankEPC = 0x30,
  RFIDLockBankUSER = 0x50,
};

/// Locking Operation Type<br/>
/// 锁定操作类型
typedef SWIFT_ENUM(NSInteger, RFIDLockMode, open) {
  RFIDLockModeOpen = 0x10,
  RFIDLockModeLock = 0x20,
  RFIDLockModePermanentOpen = 0x30,
  RFIDLockModePermanentLock = 0x40,
};

/// The bank area read during inventory.<br/>
/// 盘点时读取的区域
/// note:
/// Only when the inventoryBank property is set to EPC_TID_USER will the offset and length attributes take effect.<br/>
/// 只有inventoryBank属性为EPC_TID_USER时，offset和length属性才会生效
SWIFT_CLASS("_TtC10RFIDBleSDK14RFIDMemoryBank")
@interface RFIDMemoryBank : NSObject
/// Inventory bank, see <code>InventoryBank-swift.enum</code><br/>
/// 盘点区域，见<code>InventoryBank-swift.enum</code>
@property (nonatomic) NSInteger inventoryBank;
/// The offset address setting applies to:  USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 偏移地址，在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
@property (nonatomic) NSInteger offset;
/// The data length setting applies to: USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 数据长度。在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
@property (nonatomic) NSInteger length;
/// init Object.
/// \param bank The data area of the tag read during inventory. It can have the following values from <code>InventoryBank-swift.enum</code> : EPC (0), EPC+TID (1), EPC+TID+USER (2)、EPC_RESERVED (10).<br/>
/// 盘点时读取的标签数据区域，可取值为 <code>InventoryBank-swift.enum</code> 的 EPC (0)、EPC+TID (1)、EPC+TID+USER (2)、EPC_RESERVED (10)
///
- (nonnull instancetype)initWithBank:(NSInteger)bank OBJC_DESIGNATED_INITIALIZER;
/// init Object.
/// \param bank The data area of the tag read during inventory. see <code>InventoryBank-swift.enum</code>.<br/>
/// 盘点时读取的标签数据区域，见 <code>InventoryBank-swift.enum</code>
///
/// \param offset The offset address setting applies to:  USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 偏移地址，在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
///
/// \param length The data length setting applies to: USER data when <code>bank=.EPC_TID_USER</code>; RESERVED data when <code>bank=.EPC_RESERVED</code>.<br/>
/// 数据长度。在 <code>bank</code>=<code>.EPC_TID_USER</code> 时对盘点 <code>USER</code> 数据生效；在 <code>bank</code>=<code>.EPC_RESERVED</code> 时对盘点 <code>RESERVED</code> 数据生效.
///
- (nonnull instancetype)initWithBank:(NSInteger)bank offset:(NSInteger)offset length:(NSInteger)length OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The data area of the tag read during inventory.<br/>
/// 盘点时读取的标签数据区域
typedef SWIFT_ENUM(NSInteger, InventoryBank, open) {
/// 0: Read only EPC
  InventoryBankEPC = 0,
/// 1: EPC + TID
  InventoryBankEPC_TID = 1,
/// 2: EPC + TID + USER
  InventoryBankEPC_TID_USER = 2,
/// 10: EPC + RESERVED
  InventoryBankEPC_RESERVED = 0x0A,
};

/// RFLink<br/>
/// RF链路组合
typedef SWIFT_ENUM(NSInteger, RFIDRFLink, open) {
/// 0x00: PR_ASK/Miller8/160KHz
  RFIDRFLinkPR_ASK_Miller8_160KHz = 0x00,
/// 0x01: PR_ASK/Miller4/250KHz
  RFIDRFLinkPR_ASK_Miller4_250KHz = 0x01,
/// 0x02: PR_ASK/Miller4/320KHz
  RFIDRFLinkPR_ASK_Miller4_320KHz = 0x02,
/// 0x03: PR_ASK/Miller4/640KHz
  RFIDRFLinkPR_ASK_Miller4_640KHz = 0x03,
/// 0x04: PR_ASK/Miller2/320KHz
  RFIDRFLinkPR_ASK_Miller2_320KHz = 0x04,
/// 0x05: PR_ASK/Miller2/640KHz
  RFIDRFLinkPR_ASK_Miller2_640KHz = 0x05,
/// 0x0A: Gen2X/Miller8/160KHz
  RFIDRFLinkGen2X_Miller8_160KHz = 0x0A,
/// 0x0B: Gen2X/Miller4/250KHz
  RFIDRFLinkGen2X_Miller4_250KHz = 0x0B,
/// 0x0C: Gen2X/Miller4/320KHz
  RFIDRFLinkGen2X_Miller4_320KHz = 0x0C,
/// 0x0D: Gen2X/Miller4/640KHz
  RFIDRFLinkGen2X_Miller4_640KHz = 0x0D,
/// 0x0E: Gen2X/Miller2/320KHz
  RFIDRFLinkGen2X_Miller2_320KHz = 0x0E,
/// 0x0F: Gen2X/Miller2/640KHz
  RFIDRFLinkGen2X_Miller2_640KHz = 0x0F,
};

enum RFIDResultCode : NSInteger;
/// Return objects for SDK related requests.<br/>
/// SDK相关请求的返回对象
SWIFT_CLASS("_TtC10RFIDBleSDK10RFIDResult")
@interface RFIDResult : NSObject
/// Request response code. see <code>RFIDResultCode</code><br/>
/// 请求响应代码，具体见<code>RFIDResultCode</code>
@property (nonatomic, readonly) enum RFIDResultCode code;
/// Request response data,  the data will be of the corresponding data type based on the specific request.<br/>
/// 请求返回数据，会根据具体请求返回相应的数据类型
@property (nonatomic, readonly, strong) NSObject * _Nullable data;
- (nonnull instancetype)init:(enum RFIDResultCode)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(enum RFIDResultCode)code :(NSObject * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Result Code.<br/>
/// 结果代码.
/// note:
/// 0 indicates success, and values ​​less than 0 indicate failure. Different negative numbers represent different reasons for failure,
/// and positive numbers have specific meanings in specific interfaces.<br/>
/// 0 表示成功，小于 0 表示失败，不同的负数表示不同的失败原因，正数在特定接口有特定的含义.
typedef SWIFT_ENUM(NSInteger, RFIDResultCode, open) {
/// 1: Pending or in progress state. 待处理或进行中状态
  RFIDResultCodePending = 1,
/// 0: success  成功
  RFIDResultCodeSuccess = 0,
/// -1: failure  失败
  RFIDResultCodeFailure = -1,
/// -2: bluetooth is not connected.  蓝牙未连接
  RFIDResultCodeBleDisconnect = -2,
/// -3: request timeout.  请求超时
  RFIDResultCodeTimeout = -3,
/// -4: device is inventorying.  设备盘点中
  RFIDResultCodeInventorying = -4,
/// -5: radar localizing. 雷达定位中
  RFIDResultCodeRadarLocalizing = -5,
/// -6: localizing. 定位中
  RFIDResultCodeLocalizing = -6,
/// -8: barcode scanning. 条码扫描中
  RFIDResultCodeBarcodeScanning = -8,
/// -100: filter enable must be true. 过滤enable参数必须为true
  RFIDResultCodeFilterDisable = -100,
/// -101: filter bank error. 过滤bank参数错误
  RFIDResultCodeFilterBankError = -101,
/// -102: filter offset error. 过滤offset参数错误
  RFIDResultCodeFilterOffsetError = -102,
/// -103: filter length error. 过滤length参数错误
  RFIDResultCodeFilterLengthError = -103,
/// -104: filter data empty. 过滤data参数为空
  RFIDResultCodeFilterDataEmpty = -104,
/// -105: filter data error. 过滤data参数错误
  RFIDResultCodeFilterDataError = -105,
/// -150: bank error. bank参数错误
  RFIDResultCodeBankError = -150,
/// -151: offset error. offset参数错误
  RFIDResultCodeOffsetError = -151,
/// -152: length error. length参数错误
  RFIDResultCodeLengthError = -152,
/// -153: data empty. data参数为空
  RFIDResultCodeDataEmpty = -153,
/// -154: data error. data参数错误
  RFIDResultCodeDataError = -154,
/// -155: password empty. 密码为空
  RFIDResultCodePasswordEmpty = -155,
/// -156: password format error. 密码格式错误
  RFIDResultCodePasswordError = -156,
/// -157: Default password cannot be used. 不可使用默认密码
  RFIDResultCodePasswordDefaultDeny = -157,
/// -201: frequency invalid. 频率参数无效
  RFIDResultCodeFrequncyInvalid = -201,
/// -202: power invalid. 功率参数无效
  RFIDResultCodePowerInvalid = -202,
/// -203: protocol invalid. 协议参数无效
  RFIDResultCodeProtocolInvalid = -203,
/// -204: link invalid. 链路参数无效
  RFIDResultCodeLinkInvalid = -204,
/// -205: gen2 select action invalid. Gen2 SelectAction参数无效
  RFIDResultCodeGen2SelectActionInvalid = -205,
/// -206: gen2 startQ invalid. Gen2 startQ参数无效
  RFIDResultCodeGen2StartQInvalid = -206,
/// -207: gen2 minQ invalid. Gen2 minQ参数无效
  RFIDResultCodeGen2MinQInvalid = -207,
/// -208: gen2 maxQ invalid.  Gen2 maxQ参数无效
  RFIDResultCodeGen2MaxQInvalid = -208,
/// -209: gen2 LF invalid. Gen2 LF参数无效
  RFIDResultCodeGen2LFInvalid = -209,
/// -210: memory bank invalid. menmoryBank参数无效
  RFIDResultCodeMemoryBankInvalid = -210,
/// -211: memory offset invalid.  memoryOffset参数无效
  RFIDResultCodeMemoryOffsetInvalid = -211,
/// -212: memoryLength invalid.  memoryLength参数无效
  RFIDResultCodeMemoryLengthInvalid = -212,
/// -301: no tag found. 未找到标签
  RFIDResultCodeNoTagFound = -301,
/// -302: no privileges. 无权限
  RFIDResultCodeNoPrivileges = -302,
/// -303: memory overflow. 数据区超限
  RFIDResultCodeMemoryOverflow = -303,
/// -304: memory lock. 数据区被锁定
  RFIDResultCodeMemoryLock = -304,
/// -305: tag no reply. 标签无响应
  RFIDResultCodeTagNoReply = -305,
/// -306: password wrong. 密码不正确
  RFIDResultCodePasswordWrong = -306,
/// -307: buffer overflow. 缓冲区溢出
  RFIDResultCodeBufferOverflow = -307,
/// -308: no enough power on tag. 标签能量不足
  RFIDResultCodeNoEnoughPowerOnTag = -308,
/// -309: parse error.  解析错误
  RFIDResultCodeParseError = -309,
/// -310: operate fail.  操作失败
  RFIDResultCodeOperateFail = -310,
/// -311: lockMode error.  lockMode参数错误
  RFIDResultCodeLockModeError = -311,
/// -312: lockBank empty.  lockBank参数为空
  RFIDResultCodeLockBankEmpty = -312,
/// -313: lockBank error.  lockBank参数错误
  RFIDResultCodeLockBankError = -313,
/// -401: key parameter empty.  key参数为空
  RFIDResultCodeBarcodeKeyEmpty = -401,
/// -402: key parameter error.  key参数错误
  RFIDResultCodeBarcodeKeyError = -402,
/// -403: value parameter empty.  value参数为空
  RFIDResultCodeBarcodeValueEmpty = -403,
/// -404: value parameter error.  value参数错误
  RFIDResultCodeBarcodeValueError = -404,
/// -501: upgrade type parameter Error.  type参数错误
  RFIDResultCodeUpgradeTypeError = -501,
/// -502: upgrade file data is empty.  升级文件数据为空
  RFIDResultCodeUpgradeFileDataEmpty = -502,
/// -503: Failed to start the upgrade.  开启升级失败
  RFIDResultCodeUpgradeStartFailed = -503,
/// -504: Failed to send upgrade file data. 发送升级文件数据失败
  RFIDResultCodeUpgradeSendFileDataFailed = -504,
/// -505: Failed to stop the upgrade.  停止升级失败
  RFIDResultCodeUpgradeStopFailed = -505,
/// -506: Failed to open upgrade file.  升级文件打开失败
  RFIDResultCodeUpgradeFileOpenError = -506,
/// -507: Failed to upgrade bluetooth.  升级蓝牙失败
  RFIDResultCodeUpgradeBluetoothFail = -507,
};

/// UHF module working status.<br/>
/// UHF 模块工作状态
typedef SWIFT_ENUM(NSInteger, RFIDState, open) {
  RFIDStateStop = 0,
  RFIDStateInventory = 1,
  RFIDStateRadar = 2,
  RFIDStateLocation = 3,
};

/// RFID Tag object.<br/>
/// RFID标签数据对象
SWIFT_CLASS("_TtC10RFIDBleSDK11RFIDTagInfo")
@interface RFIDTagInfo : NSObject <NSCopying>
@property (nonatomic, readonly, copy) NSString * _Nonnull reserved;
@property (nonatomic, readonly, copy) NSString * _Nonnull epc;
@property (nonatomic, readonly, copy) NSString * _Nonnull tid;
@property (nonatomic, readonly, copy) NSString * _Nonnull user;
@property (nonatomic, readonly, copy) NSString * _Nonnull pc;
@property (nonatomic) float rssi;
@property (nonatomic) NSInteger count;
/// Unit is seconds.  单位为秒
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
- (nonnull instancetype)initWithEpc:(NSString * _Nonnull)epc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEpc:(NSString * _Nonnull)epc tid:(NSString * _Nonnull)tid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithReserved:(NSString * _Nonnull)reserved epc:(NSString * _Nonnull)epc tid:(NSString * _Nonnull)tid user:(NSString * _Nonnull)user pc:(NSString * _Nonnull)pc rssi:(float)rssi OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull tagDescription;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Upgrade Type<br/>
/// 升级类型
typedef SWIFT_ENUM(NSInteger, RFIDUpgradeType, open) {
/// 0: Mainboard
  RFIDUpgradeTypeMainboard = 0,
/// 1: UHF
  RFIDUpgradeTypeUHF = 1,
/// 2: Bluetooth
  RFIDUpgradeTypeBluetooth = 2,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
