// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name RFIDBleSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CoreBluetooth
import CoreLocation
import Foundation
@_exported import RFIDBleSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LogUtil : ObjectiveC.NSObject {
  @objc public static let shared: RFIDBleSDK.LogUtil
  @objc public var showLog: Swift.Bool
  @objc public var saveLog: Swift.Bool
  @objc public func clearAllLogs()
  @objc public func getLogFiles() -> [Foundation.URL]
  @objc public func readLogFileContent(_ logFilePath: Foundation.URL) -> Swift.String?
  @objc deinit
}
@objc public enum RFIDFrequency : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  case China1 = 0x01
  case China2 = 0x02
  case Europe = 0x04
  case USA = 0x08
  case Korea = 0x16
  case Japan = 0x32
  case SouthAfrica = 0x33
  case Taiwan = 0x34
  case Vietnam = 0x35
  case Peru = 0x36
  case Russia = 0x37
  case Malaysia = 0x3B
  case Brazil = 0x3C
  case ETSI_UPPER = 0x3D
  case Australia = 0x3E
  case Indonesia = 0x3F
  case Israel = 0x40
  case HongKong = 0x41
  case NewZealand = 0x42
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDFrequency]
  public typealias ID = Swift.Int
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDFrequency] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RFIDState : Swift.Int, Swift.CaseIterable {
  case stop = 0
  case inventory = 1
  case radar = 2
  case location = 3
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDState]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDState] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RFIDBank : Swift.Int, Swift.CaseIterable {
  case RESERVED = 0
  case EPC = 1
  case TID = 2
  case USER = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDBank]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDBank] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class RFIDLocateInfo : ObjectiveC.NSObject, Swift.Identifiable, Foundation.NSCopying {
  @objc public var tag: RFIDBleSDK.RFIDTagInfo
  @objc public var value: Swift.Double
  @objc public var angle: Swift.Double
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public init(tag: RFIDBleSDK.RFIDTagInfo, value: Swift.Double)
  @objc public init(tag: RFIDBleSDK.RFIDTagInfo, angle: Swift.Double, value: Swift.Double)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public typealias ID = Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class RFIDFilter : ObjectiveC.NSObject {
  @objc public var enable: Swift.Bool
  @objc public var bank: Swift.Int
  @objc public var offset: Swift.Int
  @objc public var length: Swift.Int
  @objc public var data: Swift.String
  @objc public init(_ enable: Swift.Bool)
  @objc public init(enable: Swift.Bool, bank: Swift.Int, offset: Swift.Int, length: Swift.Int, data: Swift.String)
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum RFIDLockMode : Swift.Int, Swift.CaseIterable {
  case Open = 0x10
  case Lock = 0x20
  case PermanentOpen = 0x30
  case PermanentLock = 0x40
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDLockMode]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDLockMode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum RFIDLockBank : Swift.Int, Swift.CaseIterable {
  case Kill = 0x10
  case Access = 0x20
  case EPC = 0x30
  case USER = 0x50
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDLockBank]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDLockBank] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class RFIDTagInfo : ObjectiveC.NSObject, Swift.Identifiable, Swift.Comparable, Foundation.NSCopying {
  @objc final public let reserved: Swift.String
  @objc final public let epc: Swift.String
  @objc final public let tid: Swift.String
  @objc final public let user: Swift.String
  @objc final public let pc: Swift.String
  @objc public var rssi: Swift.Float
  @objc public var count: Swift.Int
  @objc final public let timestamp: Foundation.TimeInterval
  @objc public var id: Swift.String {
    @objc get
  }
  @objc public init(epc: Swift.String)
  @objc public init(epc: Swift.String, tid: Swift.String)
  @objc public init(reserved: Swift.String, epc: Swift.String, tid: Swift.String, user: Swift.String, pc: Swift.String, rssi: Swift.Float)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var tagDescription: Swift.String {
    @objc get
  }
  public static func == (lhs: RFIDBleSDK.RFIDTagInfo, rhs: RFIDBleSDK.RFIDTagInfo) -> Swift.Bool
  public static func < (lhs: RFIDBleSDK.RFIDTagInfo, rhs: RFIDBleSDK.RFIDTagInfo) -> Swift.Bool
  public static func > (lhs: RFIDBleSDK.RFIDTagInfo, rhs: RFIDBleSDK.RFIDTagInfo) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public typealias ID = Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class RFIDGen2 : ObjectiveC.NSObject {
  @objc public var selectTarget: Swift.Int
  @objc public var selectAction: Swift.Int
  @objc public var selectTruncate: Swift.Int
  @objc public var q: Swift.Int
  @objc public var startQ: Swift.Int
  @objc public var minQ: Swift.Int
  @objc public var maxQ: Swift.Int
  @objc public var queryDR: Swift.Int
  @objc public var queryM: Swift.Int
  @objc public var queryTRext: Swift.Int
  @objc public var querySel: Swift.Int
  @objc public var querySession: Swift.Int
  @objc public var queryTarget: Swift.Int
  @objc public var linkFrequency: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public enum SelectTarget : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case S0 = 0x00
    case S1 = 0x01
    case S2 = 0x02
    case S3 = 0x03
    case SL = 0x04
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.SelectTarget]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.SelectTarget] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum SelectTruncate : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case Disable = 0
    case Enable = 1
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.SelectTruncate]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.SelectTruncate] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Q : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case Static = 0
    case Dynamic = 1
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.Q]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.Q] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QueryDR : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case DR_8 = 0
    case DR_64_3 = 1
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QueryDR]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QueryDR] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QueryM : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case FM0 = 0
    case Miller2 = 1
    case Miller4 = 2
    case Miller8 = 3
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QueryM]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QueryM] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QueryTRext : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case NoPilot = 0
    case UsePilot = 1
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QueryTRext]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QueryTRext] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QuerySel : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case All = 0
    case All2 = 1
    case NotSL = 2
    case SL = 3
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QuerySel]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QuerySel] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QuerySession : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case S0 = 0
    case S1 = 1
    case S2 = 2
    case S3 = 3
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QuerySession]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QuerySession] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum QueryTarget : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case A = 0
    case B = 1
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDGen2.QueryTarget]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDGen2.QueryTarget] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class RFIDBleVersion : ObjectiveC.NSObject {
  @objc final public let hardware: Swift.String
  @objc final public let firmware: Swift.String
  @objc final public let software: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum RFIDUpgradeType : Swift.Int, Swift.CaseIterable {
  public var id: Swift.Int {
    get
  }
  case Mainboard = 0
  case UHF = 1
  case Bluetooth = 2
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDUpgradeType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDUpgradeType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class RFIDBarcodeInfo : ObjectiveC.NSObject {
  @objc final public let result: Swift.Bool
  @objc final public let barcode: Swift.String
  @objc final public let barcodeData: Foundation.Data
  final public let codeId: RFIDBleSDK.RFIDBarcodeTypeInCodeID
  @objc final public let ssiId: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias BleRFIDTagInfoBlock = (_ tagInfo: RFIDBleSDK.RFIDTagInfo) -> Swift.Void
public typealias BleKeyEventBlock = (_ keyCode: Swift.Int) -> Swift.Void
public typealias BleRadarInfoBlock = (_ radarInfo: [RFIDBleSDK.RFIDLocateInfo]) -> Swift.Void
public typealias BleLocateInfoBlock = (_ locateInfo: RFIDBleSDK.RFIDLocateInfo) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class RFIDBleManager : ObjectiveC.NSObject {
  @objc public static let shared: RFIDBleSDK.RFIDBleManager
  @objc public var blePeripheralsBlock: ((_ peripheral: CoreBluetooth.CBPeripheral, _ advertisementData: [Swift.String : Any], _ RSSI: Foundation.NSNumber) -> Swift.Void)?
  @objc public var bleStateUpdateBlock: ((_ peripheral: CoreBluetooth.CBPeripheral, _ state: CoreBluetooth.CBPeripheralState) -> Swift.Void)?
  @objc public var bleRFIDTagInfoBlock: RFIDBleSDK.BleRFIDTagInfoBlock?
  @objc public var peripheral: CoreBluetooth.CBPeripheral? {
    @objc get
  }
  @objc public func setKeyEvent(keyDownBlock: RFIDBleSDK.BleKeyEventBlock?, keyUpBlock: RFIDBleSDK.BleKeyEventBlock?)
  @objc public func getInventoryFlag() -> RFIDBleSDK.RFIDState
  @objc deinit
}
extension RFIDBleSDK.RFIDBleManager {
  @objc dynamic public func scanForPeripherals(serviceUUIDS: [CoreBluetooth.CBUUID]? = nil, options: [Swift.String : Any]? = nil, _ blePeripheralsBlock: ((_ peripheral: CoreBluetooth.CBPeripheral, _ advertisementData: [Swift.String : Any], _ RSSI: Foundation.NSNumber) -> Swift.Void)? = nil)
  @objc dynamic public func stopForPeripherals()
  @objc dynamic public func connectPeripheral(_ peripheral: CoreBluetooth.CBPeripheral, bleDidFailToConnectBlock: ((_ peripheral: CoreBluetooth.CBPeripheral, _ error: (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc dynamic public func disconnectPeripheral(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func retrieveConnectedPeripherals() -> [CoreBluetooth.CBPeripheral]
}
extension RFIDBleSDK.RFIDBleManager {
  @objc dynamic public func singleInventory(filter: RFIDBleSDK.RFIDFilter?) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func startInventory(filter: RFIDBleSDK.RFIDFilter?, bleRFIDTagInfoBlock: RFIDBleSDK.BleRFIDTagInfoBlock? = nil) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func stopInventory() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func readData(filter: RFIDBleSDK.RFIDFilter = RFIDFilter(false), bank: Swift.Int, offset: Swift.Int, length: Swift.Int, password: Swift.String) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func writeData(filter: RFIDBleSDK.RFIDFilter = RFIDFilter(false), bank: Swift.Int, offset: Swift.Int, length: Swift.Int, password: Swift.String, data: Swift.String) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func lockMem(filter: RFIDBleSDK.RFIDFilter, lockMode: Swift.Int, lockBank: [Swift.Int], password: Swift.String) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func killTag(filter: RFIDBleSDK.RFIDFilter, password: Swift.String) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setFrequency(_ frequency: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getFrequency() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setPower(_ power: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getPower() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setRFLink(_ rfLink: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getRFLink() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setGen2(_ gen2: RFIDBleSDK.RFIDGen2) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getGen2() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setMemoryBank(_ memoryBank: RFIDBleSDK.RFIDMemoryBank) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getMemoryBank() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setFastID(_ fastID: Swift.Bool) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getFastID() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setTagFocus(_ tagFocus: Swift.Bool) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getTagFocus() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func startRadarLocation(filter: RFIDBleSDK.RFIDFilter, radarInfoBlock: @escaping RFIDBleSDK.BleRadarInfoBlock, radarAngleBlock: @escaping (_ angle: Swift.Double) -> Swift.Void) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func stopRadarLocation() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setDynamicDistance(_ distance: Swift.Int)
  @objc dynamic public func startLocation(filter: RFIDBleSDK.RFIDFilter, locateInfoBlock: @escaping RFIDBleSDK.BleLocateInfoBlock) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func stopLocation() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getUHFHardwareVersion() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getUHFFirmwareVersion() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getUHFTemperature() -> RFIDBleSDK.RFIDResult
}
extension RFIDBleSDK.RFIDBleManager {
  @available(*, deprecated, message: "Use startBarcode(barcodeBlock:(_ barcode: RFIDBarcodeInfo) -> Void) instead")
  @objc dynamic public func startBarcode(continuous: Swift.Bool, unique: Swift.Bool, barcodeBlock: @escaping (_ barcode: RFIDBleSDK.RFIDBarcodeInfo) -> Swift.Void) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func startBarcode(barcodeBlock: @escaping (_ barcode: RFIDBleSDK.RFIDBarcodeInfo) -> Swift.Void) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func stopBarcode() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setBarcodeType(_ barcodeType: Swift.Bool) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBarcodeType() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setBarcodeParameter(key: Swift.String, value: Swift.String) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBarcodeParameter(_ key: Swift.String) -> RFIDBleSDK.RFIDResult
}
extension RFIDBleSDK.RFIDBleManager {
  @objc dynamic public func setRssi(_ rssi: Swift.Bool) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getRssi() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setBuzzer(_ buzzer: Swift.Bool) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBuzzer() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setBuzzerVolume(_ volume: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBuzzerVolume() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBluetoothVersion() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getMainboardVersion() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getBattery() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setKeyMode(_ keyMode: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getKeyMode() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func setTurnKey(_ turnKey: Swift.Int) -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getTurnKey() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func getSN() -> RFIDBleSDK.RFIDResult
  @objc dynamic public func upgrade(type: Swift.Int, fileData: Foundation.Data, callback: @escaping (_ result: RFIDBleSDK.RFIDResult) -> Swift.Void)
}
@objc public enum RFIDResultCode : Swift.Int, Swift.CaseIterable {
  case pending = 1
  case success = 0
  case failure = -1
  case bleDisconnect = -2
  case timeout = -3
  case inventorying = -4
  case radarLocalizing = -5
  case localizing = -6
  case barcodeScanning = -8
  case filterDisable = -100
  case filterBankError = -101
  case filterOffsetError = -102
  case filterLengthError = -103
  case filterDataEmpty = -104
  case filterDataError = -105
  case bankError = -150
  case offsetError = -151
  case lengthError = -152
  case dataEmpty = -153
  case dataError = -154
  case passwordEmpty = -155
  case passwordError = -156
  case passwordDefaultDeny = -157
  case frequncyInvalid = -201
  case powerInvalid = -202
  case protocolInvalid = -203
  case linkInvalid = -204
  case gen2SelectActionInvalid = -205
  case gen2StartQInvalid = -206
  case gen2MinQInvalid = -207
  case gen2MaxQInvalid = -208
  case gen2LFInvalid = -209
  case memoryBankInvalid = -210
  case memoryOffsetInvalid = -211
  case memoryLengthInvalid = -212
  case noTagFound = -301
  case noPrivileges = -302
  case memoryOverflow = -303
  case memoryLock = -304
  case tagNoReply = -305
  case passwordWrong = -306
  case bufferOverflow = -307
  case noEnoughPowerOnTag = -308
  case parseError = -309
  case operateFail = -310
  case lockModeError = -311
  case lockBankEmpty = -312
  case lockBankError = -313
  case barcodeKeyEmpty = -401
  case barcodeKeyError = -402
  case barcodeValueEmpty = -403
  case barcodeValueError = -404
  case upgradeTypeError = -501
  case upgradeFileDataEmpty = -502
  case upgradeStartFailed = -503
  case upgradeSendFileDataFailed = -504
  case upgradeStopFailed = -505
  case upgradeFileOpenError = -506
  case upgradeBluetoothFail = -507
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDResultCode]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDResultCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class RFIDResult : ObjectiveC.NSObject {
  @objc final public let code: RFIDBleSDK.RFIDResultCode
  @objc final public let data: ObjectiveC.NSObject?
  @objc public init(_ code: RFIDBleSDK.RFIDResultCode)
  @objc public init(_ code: RFIDBleSDK.RFIDResultCode, _ data: ObjectiveC.NSObject? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers public class RFIDMemoryBank : ObjectiveC.NSObject {
  @objc public var inventoryBank: Swift.Int
  @objc public var offset: Swift.Int
  @objc public var length: Swift.Int
  @objc public init(bank: Swift.Int)
  @objc public init(bank: Swift.Int, offset: Swift.Int, length: Swift.Int)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public enum InventoryBank : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
    public var id: Swift.Int {
      get
    }
    case EPC = 0
    case EPC_TID = 1
    case EPC_TID_USER = 2
    case EPC_RESERVED = 0x0A
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [RFIDBleSDK.RFIDMemoryBank.InventoryBank]
    public typealias ID = Swift.Int
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [RFIDBleSDK.RFIDMemoryBank.InventoryBank] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class RFIDBarcodeTypeInSSIID {
  @objc public static func getBarcodeType(_ ssiId: Swift.Int) -> Swift.String
  @objc deinit
}
public enum RFIDBarcodeTypeInCodeID : Swift.String, Swift.CaseIterable {
  case None
  case A
  case B
  case C
  case D
  case E
  case F
  case G
  case H
  case J
  case K
  case L
  case M
  case N
  case R
  case S
  case T
  case U
  case V
  case X
  case z
  case P00
  case P01
  case P02
  case P03
  case P04
  case P05
  case P06
  case P08
  case P09
  case P0A
  case P0B
  case P0H
  case P0X
  public init?(rawValue: Swift.String)
  public typealias AllCases = [RFIDBleSDK.RFIDBarcodeTypeInCodeID]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [RFIDBleSDK.RFIDBarcodeTypeInCodeID] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum RFIDRFLink : Swift.Int, Swift.CaseIterable, Swift.Identifiable {
  public var id: Swift.Int {
    get
  }
  case PR_ASK_Miller8_160KHz = 0x00
  case PR_ASK_Miller4_250KHz = 0x01
  case PR_ASK_Miller4_320KHz = 0x02
  case PR_ASK_Miller4_640KHz = 0x03
  case PR_ASK_Miller2_320KHz = 0x04
  case PR_ASK_Miller2_640KHz = 0x05
  case Gen2X_Miller8_160KHz = 0x0A
  case Gen2X_Miller4_250KHz = 0x0B
  case Gen2X_Miller4_320KHz = 0x0C
  case Gen2X_Miller4_640KHz = 0x0D
  case Gen2X_Miller2_320KHz = 0x0E
  case Gen2X_Miller2_640KHz = 0x0F
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [RFIDBleSDK.RFIDRFLink]
  public typealias ID = Swift.Int
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [RFIDBleSDK.RFIDRFLink] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension RFIDBleSDK.RFIDFrequency : Swift.Equatable {}
extension RFIDBleSDK.RFIDFrequency : Swift.Hashable {}
extension RFIDBleSDK.RFIDFrequency : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDState : Swift.Equatable {}
extension RFIDBleSDK.RFIDState : Swift.Hashable {}
extension RFIDBleSDK.RFIDState : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDBank : Swift.Equatable {}
extension RFIDBleSDK.RFIDBank : Swift.Hashable {}
extension RFIDBleSDK.RFIDBank : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDLockMode : Swift.Equatable {}
extension RFIDBleSDK.RFIDLockMode : Swift.Hashable {}
extension RFIDBleSDK.RFIDLockMode : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDLockBank : Swift.Equatable {}
extension RFIDBleSDK.RFIDLockBank : Swift.Hashable {}
extension RFIDBleSDK.RFIDLockBank : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.SelectTarget : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.SelectTarget : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.SelectTarget : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.SelectTruncate : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.SelectTruncate : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.SelectTruncate : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.Q : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.Q : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.Q : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QueryDR : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QueryDR : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QueryDR : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QueryM : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QueryM : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QueryM : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QueryTRext : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QueryTRext : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QueryTRext : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QuerySel : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QuerySel : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QuerySel : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QuerySession : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QuerySession : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QuerySession : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDGen2.QueryTarget : Swift.Equatable {}
extension RFIDBleSDK.RFIDGen2.QueryTarget : Swift.Hashable {}
extension RFIDBleSDK.RFIDGen2.QueryTarget : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDUpgradeType : Swift.Equatable {}
extension RFIDBleSDK.RFIDUpgradeType : Swift.Hashable {}
extension RFIDBleSDK.RFIDUpgradeType : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDResultCode : Swift.Equatable {}
extension RFIDBleSDK.RFIDResultCode : Swift.Hashable {}
extension RFIDBleSDK.RFIDResultCode : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDMemoryBank.InventoryBank : Swift.Equatable {}
extension RFIDBleSDK.RFIDMemoryBank.InventoryBank : Swift.Hashable {}
extension RFIDBleSDK.RFIDMemoryBank.InventoryBank : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDBarcodeTypeInCodeID : Swift.Equatable {}
extension RFIDBleSDK.RFIDBarcodeTypeInCodeID : Swift.Hashable {}
extension RFIDBleSDK.RFIDBarcodeTypeInCodeID : Swift.RawRepresentable {}
extension RFIDBleSDK.RFIDRFLink : Swift.Equatable {}
extension RFIDBleSDK.RFIDRFLink : Swift.Hashable {}
extension RFIDBleSDK.RFIDRFLink : Swift.RawRepresentable {}
